//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship EntityModelHasPersistentTypes
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1716852c-97ed-482e-8e74-ce75c4d63d78")]
	internal partial class EntityModelHasPersistentTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityModelHasPersistentTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1716852c, 0x97ed, 0x482e, 0x8e, 0x74, 0xce, 0x75, 0xc4, 0xd6, 0x3d, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityModelHasPersistentTypes link in the same Partition as the given EntityModel
		/// </summary>
		/// <param name="source">EntityModel to use as the source of the relationship.</param>
		/// <param name="target">PersistentType to use as the target of the relationship.</param>
		internal EntityModelHasPersistentTypes(EntityModel source, PersistentType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityModelHasPersistentTypes.EntityModelDomainRoleId, source), new DslModeling::RoleAssignment(EntityModelHasPersistentTypes.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelHasPersistentTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelHasPersistentTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelHasPersistentTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelHasPersistentTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityModel domain role code
		
		/// <summary>
		/// EntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityModelDomainRoleId = new global::System.Guid(0xf74bf639, 0x22de, 0x415f, 0x95, 0x96, 0xf8, 0xf4, 0x06, 0x32, 0x7b, 0x8e);
		
		/// <summary>
		/// DomainRole EntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/EntityModel.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/EntityModel.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PersistentTypes", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/EntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f74bf639-22de-415f-9596-f8f406327b8e")]
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityModel of a PersistentType
		/// <summary>
		/// Gets EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static EntityModel GetEntityModel(PersistentType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as EntityModel;
		}
		
		/// <summary>
		/// Sets EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetEntityModel(PersistentType element, EntityModel newEntityModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newEntityModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xd1978db9, 0x853e, 0x4ed8, 0x8b, 0xf3, 0x50, 0xb9, 0xc9, 0x52, 0xdb, 0x6a);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/Element.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/Element.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityModel", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("d1978db9-853e-4ed8-8bf3-50b9c952db6a")]
		internal virtual PersistentType Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentTypes of a EntityModel
		/// <summary>
		/// Gets a list of PersistentTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<PersistentType> GetPersistentTypes(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentType>, PersistentType>(element, EntityModelDomainRoleId);
		}
		#endregion
		#region EntityModel link accessor
		/// <summary>
		/// Get the list of EntityModelHasPersistentTypes links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> GetLinksToPersistentTypes ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel entityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes>(entityModelInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.EntityModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the EntityModelHasPersistentTypes link to a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes GetLinkToEntityModel (global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType elementInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes>(elementInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityModelHasPersistentTypes instance accessors
		
		/// <summary>
		/// Get any EntityModelHasPersistentTypes links between a given EntityModel and a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.EntityModelDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityModelHasPersistentTypes link between a given EntityModeland a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.EntityModelDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship InterfaceInheritInterfaces
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ecd47b63-a3c8-49b5-bb75-aa648140f1b1")]
	internal partial class InterfaceInheritInterfaces : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceInheritInterfaces domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xecd47b63, 0xa3c8, 0x49b5, 0xbb, 0x75, 0xaa, 0x64, 0x81, 0x40, 0xf1, 0xb1);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceInheritInterfaces link in the same Partition as the given Interface
		/// </summary>
		/// <param name="source">Interface to use as the source of the relationship.</param>
		/// <param name="target">Interface to use as the target of the relationship.</param>
		internal InterfaceInheritInterfaces(Interface source, Interface target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceInheritInterfaces.SourceInheritInterfaceDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceInheritInterfaces.TargetInheritByInterfaceDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceInheritInterfaces(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceInheritInterfaces(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceInheritInterfaces(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceInheritInterfaces(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceInheritInterface domain role code
		
		/// <summary>
		/// SourceInheritInterface domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceInheritInterfaceDomainRoleId = new global::System.Guid(0x41182262, 0xf64d, 0x4d0b, 0x94, 0x4e, 0xce, 0xb2, 0x5a, 0xdd, 0x52, 0x2d);
		
		/// <summary>
		/// DomainRole SourceInheritInterface
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterface
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/SourceInheritInterface.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/SourceInheritInterface.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "InheritedInterfaces", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/SourceInheritInterface.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("41182262-f64d-4d0b-944e-ceb25add522d")]
		internal virtual Interface SourceInheritInterface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Interface)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceInheritInterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceInheritInterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InheritingByInterfaces of a Interface
		/// <summary>
		/// Gets a list of InheritingByInterfaces.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<Interface> GetInheritingByInterfaces(Interface element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Interface>, Interface>(element, TargetInheritByInterfaceDomainRoleId);
		}
		#endregion
		#region TargetInheritByInterface domain role code
		
		/// <summary>
		/// TargetInheritByInterface domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetInheritByInterfaceDomainRoleId = new global::System.Guid(0x55b0592f, 0x56dc, 0x46af, 0xb8, 0xf3, 0xfb, 0xc3, 0xf6, 0x90, 0xea, 0x70);
		
		/// <summary>
		/// DomainRole TargetInheritByInterface
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.TargetInheritByInterface
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/TargetInheritByInterface.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/TargetInheritByInterface.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InheritingByInterfaces", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/TargetInheritByInterface.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("55b0592f-56dc-46af-b8f3-fbc3f690ea70")]
		internal virtual Interface TargetInheritByInterface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Interface)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetInheritByInterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetInheritByInterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InheritedInterfaces of a Interface
		/// <summary>
		/// Gets a list of InheritedInterfaces.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<Interface> GetInheritedInterfaces(Interface element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Interface>, Interface>(element, SourceInheritInterfaceDomainRoleId);
		}
		#endregion
		#region BaseType domain property code
		
		/// <summary>
		/// BaseType domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseTypeDomainPropertyId = new global::System.Guid(0xa2519999, 0x1d25, 0x4a7e, 0x94, 0xd9, 0x41, 0x52, 0xb6, 0xa9, 0x2a, 0x88);
		
		/// <summary>
		/// Gets or sets the value of BaseType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/BaseType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/BaseType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("a2519999-1d25-4a7e-94d9-4152b6a92a88")]
		public global::System.String BaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return BaseTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the InterfaceInheritInterfaces.BaseType domain property.
		/// </summary>
		internal sealed partial class BaseTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<InterfaceInheritInterfaces, global::System.String>
		{
			private BaseTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InterfaceInheritInterfaces.BaseType domain property value handler.
			/// </summary>
			public static readonly BaseTypePropertyHandler Instance = new BaseTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InterfaceInheritInterfaces.BaseType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InterfaceInheritInterfaces element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for BaseType because its Kind is
				// set to Calculated. Please provide the GetBaseTypeValue()
				// method on the domain class.
				return element.GetBaseTypeValue();
			}
		
		}
		
		#endregion
		#region DerivedType domain property code
		
		/// <summary>
		/// DerivedType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivedTypeDomainPropertyId = new global::System.Guid(0xe178c942, 0x2456, 0x4b65, 0x87, 0x88, 0xc1, 0x8f, 0xd4, 0x93, 0xda, 0x2c);
		
		/// <summary>
		/// Gets or sets the value of DerivedType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/DerivedType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces/DerivedType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("e178c942-2456-4b65-8788-c18fd493da2c")]
		public global::System.String DerivedType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivedTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the InterfaceInheritInterfaces.DerivedType domain property.
		/// </summary>
		internal sealed partial class DerivedTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<InterfaceInheritInterfaces, global::System.String>
		{
			private DerivedTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the InterfaceInheritInterfaces.DerivedType domain property value handler.
			/// </summary>
			public static readonly DerivedTypePropertyHandler Instance = new DerivedTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the InterfaceInheritInterfaces.DerivedType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivedTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(InterfaceInheritInterfaces element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivedType because its Kind is
				// set to Calculated. Please provide the GetDerivedTypeValue()
				// method on the domain class.
				return element.GetDerivedTypeValue();
			}
		
		}
		
		#endregion
		#region SourceInheritInterface link accessor
		/// <summary>
		/// Get the list of InterfaceInheritInterfaces links to a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> GetLinksToInheritedInterfaces ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface sourceInheritInterfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces>(sourceInheritInterfaceInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterfaceDomainRoleId);
		}
		#endregion
		#region TargetInheritByInterface link accessor
		/// <summary>
		/// Get the list of InterfaceInheritInterfaces links to a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> GetLinksToInheritingByInterfaces ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface targetInheritByInterfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces>(targetInheritByInterfaceInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.TargetInheritByInterfaceDomainRoleId);
		}
		#endregion
		#region InterfaceInheritInterfaces instance accessors
		
		/// <summary>
		/// Get any InterfaceInheritInterfaces links between a given Interface and a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterfaceDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces link in links )
			{
				if ( target.Equals(link.TargetInheritByInterface) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceInheritInterfaces link between a given Interfaceand a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterfaceDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces link in links )
			{
				if ( target.Equals(link.TargetInheritByInterface) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship EntityBaseHasBaseType
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("21818c26-e5f9-4413-b823-c29652ff6168")]
	internal partial class EntityBaseHasBaseType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityBaseHasBaseType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x21818c26, 0xe5f9, 0x4413, 0xb8, 0x23, 0xc2, 0x96, 0x52, 0xff, 0x61, 0x68);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityBaseHasBaseType link in the same Partition as the given EntityBase
		/// </summary>
		/// <param name="source">EntityBase to use as the source of the relationship.</param>
		/// <param name="target">EntityBase to use as the target of the relationship.</param>
		internal EntityBaseHasBaseType(EntityBase source, EntityBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityBaseHasBaseType.SourceEntityBaseDomainRoleId, source), new DslModeling::RoleAssignment(EntityBaseHasBaseType.TargetEntityBaseDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityBaseHasBaseType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityBaseHasBaseType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityBaseHasBaseType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityBaseHasBaseType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceEntityBase domain role code
		
		/// <summary>
		/// SourceEntityBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceEntityBaseDomainRoleId = new global::System.Guid(0xa5ff3f41, 0xc3fb, 0x41af, 0xb6, 0x06, 0x33, 0xa6, 0x35, 0xb0, 0xc4, 0x28);
		
		/// <summary>
		/// DomainRole SourceEntityBase
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBase
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/SourceEntityBase.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/SourceEntityBase.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BaseType", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/SourceEntityBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("a5ff3f41-c3fb-41af-b606-33a635b0c428")]
		internal virtual EntityBase SourceEntityBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceEntityBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceEntityBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseTypeOf of a EntityBase
		/// <summary>
		/// Gets a list of BaseTypeOf.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<EntityBase> GetBaseTypeOf(EntityBase element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityBase>, EntityBase>(element, TargetEntityBaseDomainRoleId);
		}
		#endregion
		#region TargetEntityBase domain role code
		
		/// <summary>
		/// TargetEntityBase domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetEntityBaseDomainRoleId = new global::System.Guid(0x0d7a5358, 0xe2b9, 0x41f3, 0xb6, 0x0f, 0xb8, 0x21, 0x43, 0x33, 0x38, 0x5a);
		
		/// <summary>
		/// DomainRole TargetEntityBase
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.TargetEntityBase
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/TargetEntityBase.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/TargetEntityBase.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BaseTypeOf", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/TargetEntityBase.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0d7a5358-e2b9-41f3-b60f-b8214333385a")]
		internal virtual EntityBase TargetEntityBase
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetEntityBaseDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetEntityBaseDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BaseType of a EntityBase
		/// <summary>
		/// Gets BaseType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static EntityBase GetBaseType(EntityBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SourceEntityBaseDomainRoleId) as EntityBase;
		}
		
		/// <summary>
		/// Sets BaseType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetBaseType(EntityBase element, EntityBase newTargetEntityBase)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SourceEntityBaseDomainRoleId, newTargetEntityBase);
		}
		#endregion
		#region BaseType domain property code
		
		/// <summary>
		/// BaseType domain property Id.
		/// </summary>
		public static readonly global::System.Guid BaseTypeDomainPropertyId = new global::System.Guid(0xc49c6603, 0xa1b4, 0x4e71, 0xac, 0x68, 0x39, 0xcd, 0x8d, 0x86, 0x70, 0x8d);
		
		/// <summary>
		/// Gets or sets the value of BaseType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/BaseType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/BaseType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("c49c6603-a1b4-4e71-ac68-39cd8d86708d")]
		public global::System.String BaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return BaseTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the EntityBaseHasBaseType.BaseType domain property.
		/// </summary>
		internal sealed partial class BaseTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<EntityBaseHasBaseType, global::System.String>
		{
			private BaseTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityBaseHasBaseType.BaseType domain property value handler.
			/// </summary>
			public static readonly BaseTypePropertyHandler Instance = new BaseTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityBaseHasBaseType.BaseType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BaseTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBaseHasBaseType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for BaseType because its Kind is
				// set to Calculated. Please provide the GetBaseTypeValue()
				// method on the domain class.
				return element.GetBaseTypeValue();
			}
		
		}
		
		#endregion
		#region DerivedType domain property code
		
		/// <summary>
		/// DerivedType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DerivedTypeDomainPropertyId = new global::System.Guid(0xac29e4f8, 0x1a3b, 0x4aa8, 0x9a, 0x62, 0x17, 0xd4, 0x33, 0xfc, 0x9a, 0x0c);
		
		/// <summary>
		/// Gets or sets the value of DerivedType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/DerivedType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType/DerivedType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("ac29e4f8-1a3b-4aa8-9a62-17d433fc9a0c")]
		public global::System.String DerivedType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DerivedTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the EntityBaseHasBaseType.DerivedType domain property.
		/// </summary>
		internal sealed partial class DerivedTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<EntityBaseHasBaseType, global::System.String>
		{
			private DerivedTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityBaseHasBaseType.DerivedType domain property value handler.
			/// </summary>
			public static readonly DerivedTypePropertyHandler Instance = new DerivedTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityBaseHasBaseType.DerivedType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DerivedTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBaseHasBaseType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DerivedType because its Kind is
				// set to Calculated. Please provide the GetDerivedTypeValue()
				// method on the domain class.
				return element.GetDerivedTypeValue();
			}
		
		}
		
		#endregion
		#region SourceEntityBase link accessor
		/// <summary>
		/// Get the EntityBaseHasBaseType link to a EntityBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType GetLinkToBaseType (global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase sourceEntityBaseInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType>(sourceEntityBaseInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBaseDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SourceEntityBase not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TargetEntityBase link accessor
		/// <summary>
		/// Get the list of EntityBaseHasBaseType links to a EntityBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> GetLinksToBaseTypeOf ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase targetEntityBaseInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType>(targetEntityBaseInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.TargetEntityBaseDomainRoleId);
		}
		#endregion
		#region EntityBaseHasBaseType instance accessors
		
		/// <summary>
		/// Get any EntityBaseHasBaseType links between a given EntityBase and a EntityBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBaseDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType link in links )
			{
				if ( target.Equals(link.TargetEntityBase) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityBaseHasBaseType link between a given EntityBaseand a EntityBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBaseDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType link in links )
			{
				if ( target.Equals(link.TargetEntityBase) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship StructurePropertyHasType
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d62e5c30-b20a-466b-a483-7c9c6776b76f")]
	internal partial class StructurePropertyHasType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// StructurePropertyHasType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd62e5c30, 0xb20a, 0x466b, 0xa4, 0x83, 0x7c, 0x9c, 0x67, 0x76, 0xb7, 0x6f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a StructurePropertyHasType link in the same Partition as the given StructureProperty
		/// </summary>
		/// <param name="source">StructureProperty to use as the source of the relationship.</param>
		/// <param name="target">Structure to use as the target of the relationship.</param>
		internal StructurePropertyHasType(StructureProperty source, Structure target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(StructurePropertyHasType.StructurePropertyDomainRoleId, source), new DslModeling::RoleAssignment(StructurePropertyHasType.StructureDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructurePropertyHasType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructurePropertyHasType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public StructurePropertyHasType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public StructurePropertyHasType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region StructureProperty domain role code
		
		/// <summary>
		/// StructureProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid StructurePropertyDomainRoleId = new global::System.Guid(0x6dff1a67, 0xfed1, 0x49dc, 0xa6, 0x84, 0x15, 0x20, 0xcf, 0x11, 0x22, 0xa4);
		
		/// <summary>
		/// DomainRole StructureProperty
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructureProperty
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/StructureProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/StructureProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Type", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/StructureProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("6dff1a67-fed1-49dc-a684-1520cf1122a4")]
		internal virtual StructureProperty StructureProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (StructureProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, StructurePropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StructurePropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypeOf of a Structure
		/// <summary>
		/// Gets a list of TypeOf.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<StructureProperty> GetTypeOf(Structure element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<StructureProperty>, StructureProperty>(element, StructureDomainRoleId);
		}
		#endregion
		#region Structure domain role code
		
		/// <summary>
		/// Structure domain role Id.
		/// </summary>
		public static readonly global::System.Guid StructureDomainRoleId = new global::System.Guid(0x98f95eca, 0x6331, 0x4c10, 0xa5, 0xec, 0x4f, 0x23, 0x38, 0x07, 0xf1, 0xe2);
		
		/// <summary>
		/// DomainRole Structure
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.Structure
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/Structure.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/Structure.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TypeOf", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType/Structure.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("98f95eca-6331-4c10-a5ec-4f233807f1e2")]
		internal virtual Structure Structure
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Structure)DslModeling::DomainRoleInfo.GetRolePlayer(this, StructureDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, StructureDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Type of a StructureProperty
		/// <summary>
		/// Gets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static Structure GetType(StructureProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, StructurePropertyDomainRoleId) as Structure;
		}
		
		/// <summary>
		/// Sets Type.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetType(StructureProperty element, Structure newStructure)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, StructurePropertyDomainRoleId, newStructure);
		}
		#endregion
		#region StructureProperty link accessor
		/// <summary>
		/// Get the StructurePropertyHasType link to a StructureProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType GetLinkToType (global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructureProperty structurePropertyInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType>(structurePropertyInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructurePropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of StructureProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Structure link accessor
		/// <summary>
		/// Get the list of StructurePropertyHasType links to a Structure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> GetLinksToTypeOf ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Structure structureInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType>(structureInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructureDomainRoleId);
		}
		#endregion
		#region StructurePropertyHasType instance accessors
		
		/// <summary>
		/// Get any StructurePropertyHasType links between a given StructureProperty and a Structure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructureProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Structure target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructurePropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType link in links )
			{
				if ( target.Equals(link.Structure) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one StructurePropertyHasType link between a given StructurePropertyand a Structure.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructureProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Structure target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructurePropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType link in links )
			{
				if ( target.Equals(link.Structure) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship PersistentTypeHasProperties
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("4be128ba-604f-4d7f-b225-31b01ca9a0b4")]
	internal partial class PersistentTypeHasProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PersistentTypeHasProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4be128ba, 0x604f, 0x4d7f, 0xb2, 0x25, 0x31, 0xb0, 0x1c, 0xa9, 0xa0, 0xb4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PersistentTypeHasProperties link in the same Partition as the given PersistentType
		/// </summary>
		/// <param name="source">PersistentType to use as the source of the relationship.</param>
		/// <param name="target">PropertyBase to use as the target of the relationship.</param>
		internal PersistentTypeHasProperties(PersistentType source, PropertyBase target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PersistentTypeHasProperties.PropertiesDomainRoleId, source), new DslModeling::RoleAssignment(PersistentTypeHasProperties.PersistentTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersistentTypeHasProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersistentTypeHasProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersistentTypeHasProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersistentTypeHasProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Properties domain role code
		
		/// <summary>
		/// Properties domain role Id.
		/// </summary>
		public static readonly global::System.Guid PropertiesDomainRoleId = new global::System.Guid(0x9f7d7b2c, 0x25a8, 0x4865, 0x80, 0x6f, 0x3a, 0xe1, 0xe8, 0x16, 0x34, 0xa9);
		
		/// <summary>
		/// DomainRole Properties
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.Properties
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/Properties.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/Properties.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Properties", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/Properties.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9f7d7b2c-25a8-4865-806f-3ae1e81634a9")]
		internal virtual PersistentType Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentType)DslModeling::DomainRoleInfo.GetRolePlayer(this, PropertiesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PropertiesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentType of a PropertyBase
		/// <summary>
		/// Gets PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PersistentType GetPersistentType(PropertyBase element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersistentTypeDomainRoleId) as PersistentType;
		}
		
		/// <summary>
		/// Sets PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPersistentType(PropertyBase element, PersistentType newProperties)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersistentTypeDomainRoleId, newProperties);
		}
		#endregion
		#region PersistentType domain role code
		
		/// <summary>
		/// PersistentType domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersistentTypeDomainRoleId = new global::System.Guid(0x9590cf04, 0xe691, 0x4350, 0x8a, 0xa8, 0x16, 0xd3, 0xd9, 0xad, 0x78, 0x4a);
		
		/// <summary>
		/// DomainRole PersistentType
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PersistentType
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/PersistentType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/PersistentType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PersistentType", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties/PersistentType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9590cf04-e691-4350-8aa8-16d3d9ad784a")]
		internal virtual PropertyBase PersistentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PropertyBase)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersistentTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersistentTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Properties of a PersistentType
		/// <summary>
		/// Gets a list of Properties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<PropertyBase> GetProperties(PersistentType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PropertyBase>, PropertyBase>(element, PropertiesDomainRoleId);
		}
		#endregion
		#region Properties link accessor
		/// <summary>
		/// Get the list of PersistentTypeHasProperties links to a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> GetLinksToProperties ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType propertiesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties>(propertiesInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PropertiesDomainRoleId);
		}
		#endregion
		#region PersistentType link accessor
		/// <summary>
		/// Get the PersistentTypeHasProperties link to a PropertyBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties GetLinkToPersistentType (global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase persistentTypeInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties>(persistentTypeInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PersistentTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PersistentType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PersistentTypeHasProperties instance accessors
		
		/// <summary>
		/// Get any PersistentTypeHasProperties links between a given PersistentType and a PropertyBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PropertiesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties link in links )
			{
				if ( target.Equals(link.PersistentType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PersistentTypeHasProperties link between a given PersistentTypeand a PropertyBase.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PropertiesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties link in links )
			{
				if ( target.Equals(link.PersistentType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship PersistentTypeHasNavigationProperties
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e6dcee2b-147d-4cac-ad5e-c71b1ebbe249")]
	internal partial class PersistentTypeHasNavigationProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PersistentTypeHasNavigationProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe6dcee2b, 0x147d, 0x4cac, 0xad, 0x5e, 0xc7, 0x1b, 0x1e, 0xbb, 0xe2, 0x49);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PersistentTypeHasNavigationProperties link in the same Partition as the given PersistentType
		/// </summary>
		/// <param name="source">PersistentType to use as the source of the relationship.</param>
		/// <param name="target">NavigationProperty to use as the target of the relationship.</param>
		internal PersistentTypeHasNavigationProperties(PersistentType source, NavigationProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PersistentTypeHasNavigationProperties.NavigationPropertiesDomainRoleId, source), new DslModeling::RoleAssignment(PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersistentTypeHasNavigationProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersistentTypeHasNavigationProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersistentTypeHasNavigationProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersistentTypeHasNavigationProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NavigationProperties domain role code
		
		/// <summary>
		/// NavigationProperties domain role Id.
		/// </summary>
		public static readonly global::System.Guid NavigationPropertiesDomainRoleId = new global::System.Guid(0x37528d18, 0xad13, 0x411e, 0xa4, 0x20, 0xbd, 0xb4, 0xbf, 0xf8, 0xe2, 0x25);
		
		/// <summary>
		/// DomainRole NavigationProperties
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationProperties
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/NavigationProperties.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/NavigationProperties.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "NavigationProperties", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/NavigationProperties.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("37528d18-ad13-411e-a420-bdb4bff8e225")]
		internal virtual PersistentType NavigationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentType)DslModeling::DomainRoleInfo.GetRolePlayer(this, NavigationPropertiesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NavigationPropertiesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentTypeOfNavigationProperty of a NavigationProperty
		/// <summary>
		/// Gets PersistentTypeOfNavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PersistentType GetPersistentTypeOfNavigationProperty(NavigationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersistentTypeOfNavigationPropertyDomainRoleId) as PersistentType;
		}
		
		/// <summary>
		/// Sets PersistentTypeOfNavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPersistentTypeOfNavigationProperty(NavigationProperty element, PersistentType newNavigationProperties)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersistentTypeOfNavigationPropertyDomainRoleId, newNavigationProperties);
		}
		#endregion
		#region PersistentTypeOfNavigationProperty domain role code
		
		/// <summary>
		/// PersistentTypeOfNavigationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersistentTypeOfNavigationPropertyDomainRoleId = new global::System.Guid(0x2afbefd1, 0x7669, 0x4a7a, 0xad, 0xb5, 0x44, 0x22, 0x57, 0xa7, 0x98, 0x99);
		
		/// <summary>
		/// DomainRole PersistentTypeOfNavigationProperty
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationProperty
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/PersistentTypeOfNavigationProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/PersistentTypeOfNavigationProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "PersistentTypeOfNavigationProperty", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties/PersistentTypeOfNavigationProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2afbefd1-7669-4a7a-adb5-442257a79899")]
		internal virtual NavigationProperty PersistentTypeOfNavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NavigationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersistentTypeOfNavigationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersistentTypeOfNavigationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NavigationProperties of a PersistentType
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<NavigationProperty> GetNavigationProperties(PersistentType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(element, NavigationPropertiesDomainRoleId);
		}
		#endregion
		#region NavigationProperties link accessor
		/// <summary>
		/// Get the list of PersistentTypeHasNavigationProperties links to a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> GetLinksToNavigationProperties ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType navigationPropertiesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties>(navigationPropertiesInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationPropertiesDomainRoleId);
		}
		#endregion
		#region PersistentTypeOfNavigationProperty link accessor
		/// <summary>
		/// Get the PersistentTypeHasNavigationProperties link to a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties GetLinkToPersistentTypeOfNavigationProperty (global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty persistentTypeOfNavigationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties>(persistentTypeOfNavigationPropertyInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of PersistentTypeOfNavigationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PersistentTypeHasNavigationProperties instance accessors
		
		/// <summary>
		/// Get any PersistentTypeHasNavigationProperties links between a given PersistentType and a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationPropertiesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties link in links )
			{
				if ( target.Equals(link.PersistentTypeOfNavigationProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PersistentTypeHasNavigationProperties link between a given PersistentTypeand a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationPropertiesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties link in links )
			{
				if ( target.Equals(link.PersistentTypeOfNavigationProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship PersistentTypeHasAssociations
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("1442d501-f954-42e3-bd77-742963ce8958")]
	internal partial class PersistentTypeHasAssociations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PersistentTypeHasAssociations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1442d501, 0xf954, 0x42e3, 0xbd, 0x77, 0x74, 0x29, 0x63, 0xce, 0x89, 0x58);
	
		// Constructors were not generated for this relationship because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		//		
		///// <summary>
		///// Constructor
		///// Creates a PersistentTypeHasAssociations link in the same Partition as the given PersistentType
		///// </summary>
		///// <param name="source">PersistentType to use as the source of the relationship.</param>
		///// <param name="target">PersistentType to use as the target of the relationship.</param>
		//internal PersistentTypeHasAssociations(PersistentType source, PersistentType target)
		//	: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PersistentTypeHasAssociations.SourcePersistentTypeDomainRoleId, source), new DslModeling::RoleAssignment(PersistentTypeHasAssociations.TargetPersistentTypeDomainRoleId, target)}, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public PersistentTypeHasAssociations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public PersistentTypeHasAssociations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		//public PersistentTypeHasAssociations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
		//	: base(partition, roleAssignments, null)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new link is to be created.</param>
		///// <param name="roleAssignments">List of relationship role assignments.</param>
		///// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		//public PersistentTypeHasAssociations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, roleAssignments, propertyAssignments)
		//{
		//}
		#endregion
		#region SourcePersistentType domain role code
		
		/// <summary>
		/// SourcePersistentType domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourcePersistentTypeDomainRoleId = new global::System.Guid(0x5361f935, 0x3433, 0x4b48, 0x95, 0x79, 0xc4, 0x9a, 0x98, 0x35, 0xc6, 0xa5);
		
		/// <summary>
		/// DomainRole SourcePersistentType
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.SourcePersistentType
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/SourcePersistentType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/SourcePersistentType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PersistentTypeAssociations", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/SourcePersistentType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5361f935-3433-4b48-9579-c49a9835c6a5")]
		internal virtual PersistentType SourcePersistentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourcePersistentTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourcePersistentTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourcePersistentTypes of a PersistentType
		/// <summary>
		/// Gets a list of SourcePersistentTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<PersistentType> GetSourcePersistentTypes(PersistentType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentType>, PersistentType>(element, TargetPersistentTypeDomainRoleId);
		}
		#endregion
		#region TargetPersistentType domain role code
		
		/// <summary>
		/// TargetPersistentType domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetPersistentTypeDomainRoleId = new global::System.Guid(0x455b6392, 0xfe71, 0x4e09, 0xa8, 0xf6, 0xc1, 0xc0, 0x2d, 0xea, 0x5e, 0xd7);
		
		/// <summary>
		/// DomainRole TargetPersistentType
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.TargetPersistentType
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/TargetPersistentType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/TargetPersistentType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourcePersistentTypes", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/TargetPersistentType.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("455b6392-fe71-4e09-a8f6-c1c02dea5ed7")]
		internal virtual PersistentType TargetPersistentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetPersistentTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetPersistentTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentTypeAssociations of a PersistentType
		/// <summary>
		/// Gets a list of PersistentTypeAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<PersistentType> GetPersistentTypeAssociations(PersistentType element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentType>, PersistentType>(element, SourcePersistentTypeDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc7465fe2, 0x9709, 0x4fcb, 0xa7, 0xa6, 0x8f, 0x65, 0x01, 0xc5, 0x29, 0x19);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/Name.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/Name.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c7465fe2-9709-4fcb-a7a6-8f6501c52919")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentTypeHasAssociations.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentTypeHasAssociations, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentTypeHasAssociations.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentTypeHasAssociations.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentTypeHasAssociations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentTypeHasAssociations element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End1 domain property code
		
		/// <summary>
		/// End1 domain property Id.
		/// </summary>
		public static readonly global::System.Guid End1DomainPropertyId = new global::System.Guid(0x0f88fe6b, 0x46f6, 0x4f1e, 0xa5, 0x98, 0xe0, 0x70, 0x69, 0x1b, 0xf3, 0x5d);
		
		/// <summary>
		/// Storage for End1
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd end1PropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of End1 domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/End1.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/End1.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0f88fe6b-46f6-4f1e-a598-e070691bf35d")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd End1
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end1PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End1PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentTypeHasAssociations.End1 domain property.
		/// </summary>
		internal sealed partial class End1PropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentTypeHasAssociations, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd>
		{
			private End1PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentTypeHasAssociations.End1 domain property value handler.
			/// </summary>
			public static readonly End1PropertyHandler Instance = new End1PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentTypeHasAssociations.End1 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End1DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd GetValue(PersistentTypeHasAssociations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end1PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentTypeHasAssociations element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end1PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region End2 domain property code
		
		/// <summary>
		/// End2 domain property Id.
		/// </summary>
		public static readonly global::System.Guid End2DomainPropertyId = new global::System.Guid(0x388a7a97, 0xac4f, 0x4143, 0xaf, 0xbd, 0xf7, 0x80, 0x11, 0x8f, 0xa6, 0xe9);
		
		/// <summary>
		/// Storage for End2
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd end2PropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of End2 domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/End2.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/End2.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("388a7a97-ac4f-4143-afbd-f780118fa6e9")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd End2
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return end2PropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				End2PropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentTypeHasAssociations.End2 domain property.
		/// </summary>
		internal sealed partial class End2PropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentTypeHasAssociations, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd>
		{
			private End2PropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentTypeHasAssociations.End2 domain property value handler.
			/// </summary>
			public static readonly End2PropertyHandler Instance = new End2PropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentTypeHasAssociations.End2 domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return End2DomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd GetValue(PersistentTypeHasAssociations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.end2PropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentTypeHasAssociations element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmAssociationEnd oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.end2PropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0x106e1bc1, 0xd06e, 0x4fd5, 0xa9, 0x0e, 0xd4, 0x18, 0xc7, 0x4c, 0xea, 0x4b);
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/SourceMultiplicity.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/SourceMultiplicity.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("106e1bc1-d06e-4fd5-a90e-d418c74cea4b")]
		public global::System.String SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return SourceMultiplicityPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentTypeHasAssociations.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentTypeHasAssociations, global::System.String>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentTypeHasAssociations.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentTypeHasAssociations.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentTypeHasAssociations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for SourceMultiplicity because its Kind is
				// set to Calculated. Please provide the GetSourceMultiplicityValue()
				// method on the domain class.
				return element.GetSourceMultiplicityValue();
			}
		
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0xe748f66e, 0xd248, 0x44ac, 0xb3, 0x92, 0x24, 0xbc, 0x14, 0x05, 0x68, 0x65);
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/TargetMultiplicity.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations/TargetMultiplicity.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("e748f66e-d248-44ac-b392-24bc14056865")]
		public global::System.String TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TargetMultiplicityPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentTypeHasAssociations.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentTypeHasAssociations, global::System.String>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentTypeHasAssociations.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentTypeHasAssociations.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentTypeHasAssociations element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TargetMultiplicity because its Kind is
				// set to Calculated. Please provide the GetTargetMultiplicityValue()
				// method on the domain class.
				return element.GetTargetMultiplicityValue();
			}
		
		}
		
		#endregion
		#region Accessors for roles that this REL plays in other RELs
		#region NavigationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.PersistentTypeHasAssociations
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NavigationProperty> NavigationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.PersistentTypeHasAssociationsDomainRoleId);
			}
		}
		#endregion
		#endregion
		#region SourcePersistentType link accessor
		/// <summary>
		/// Get the list of PersistentTypeHasAssociations links to a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations> GetLinksToPersistentTypeAssociations ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType sourcePersistentTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations>(sourcePersistentTypeInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.SourcePersistentTypeDomainRoleId);
		}
		#endregion
		#region TargetPersistentType link accessor
		/// <summary>
		/// Get the list of PersistentTypeHasAssociations links to a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations> GetLinksToSourcePersistentTypes ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType targetPersistentTypeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations>(targetPersistentTypeInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.TargetPersistentTypeDomainRoleId);
		}
		#endregion
		#region PersistentTypeHasAssociations instance accessors
		
		/// <summary>
		/// Get any PersistentTypeHasAssociations links between a given PersistentType and a PersistentType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.SourcePersistentTypeDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations link in links )
			{
				if ( target.Equals(link.TargetPersistentType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship NavigationPropertyHasAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("38623460-9242-4582-9e83-8caf46cd98e5")]
	internal partial class NavigationPropertyHasAssociation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NavigationPropertyHasAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38623460, 0x9242, 0x4582, 0x9e, 0x83, 0x8c, 0xaf, 0x46, 0xcd, 0x98, 0xe5);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NavigationPropertyHasAssociation link in the same Partition as the given NavigationProperty
		/// </summary>
		/// <param name="source">NavigationProperty to use as the source of the relationship.</param>
		/// <param name="target">PersistentTypeHasAssociations to use as the target of the relationship.</param>
		internal NavigationPropertyHasAssociation(NavigationProperty source, PersistentTypeHasAssociations target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId, source), new DslModeling::RoleAssignment(NavigationPropertyHasAssociation.PersistentTypeHasAssociationsDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NavigationPropertyHasAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NavigationPropertyHasAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NavigationPropertyHasAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NavigationPropertyHasAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region NavigationProperty domain role code
		
		/// <summary>
		/// NavigationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid NavigationPropertyDomainRoleId = new global::System.Guid(0x8da87d9f, 0xcd64, 0x4a50, 0xb1, 0xa3, 0xf7, 0xa5, 0xe8, 0x6c, 0x74, 0xe5);
		
		/// <summary>
		/// DomainRole NavigationProperty
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationProperty
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/NavigationProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/NavigationProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "PersistentTypeHasAssociations", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/NavigationProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("8da87d9f-cd64-4a50-b1a3-f7a5e86c74e5")]
		internal virtual NavigationProperty NavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NavigationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, NavigationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NavigationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access NavigationProperties of a PersistentTypeHasAssociations
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<NavigationProperty> GetNavigationProperties(PersistentTypeHasAssociations element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(element, PersistentTypeHasAssociationsDomainRoleId);
		}
		#endregion
		#region PersistentTypeHasAssociations domain role code
		
		/// <summary>
		/// PersistentTypeHasAssociations domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersistentTypeHasAssociationsDomainRoleId = new global::System.Guid(0x5a2023e8, 0xede4, 0x4594, 0xbe, 0xda, 0x9c, 0x51, 0xba, 0xb2, 0x22, 0xb4);
		
		/// <summary>
		/// DomainRole PersistentTypeHasAssociations
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.PersistentTypeHasAssociations
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/PersistentTypeHasAssociations.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/PersistentTypeHasAssociations.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "NavigationProperties", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation/PersistentTypeHasAssociations.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5a2023e8-ede4-4594-beda-9c51bab222b4")]
		internal virtual PersistentTypeHasAssociations PersistentTypeHasAssociations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (PersistentTypeHasAssociations)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersistentTypeHasAssociationsDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersistentTypeHasAssociationsDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access PersistentTypeHasAssociations of a NavigationProperty
		/// <summary>
		/// Gets PersistentTypeHasAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static PersistentTypeHasAssociations GetPersistentTypeHasAssociations(NavigationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NavigationPropertyDomainRoleId) as PersistentTypeHasAssociations;
		}
		
		/// <summary>
		/// Sets PersistentTypeHasAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetPersistentTypeHasAssociations(NavigationProperty element, PersistentTypeHasAssociations newPersistentTypeHasAssociations)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NavigationPropertyDomainRoleId, newPersistentTypeHasAssociations);
		}
		#endregion
		#region NavigationProperty link accessor
		/// <summary>
		/// Get the NavigationPropertyHasAssociation link to a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation GetLinkToPersistentTypeHasAssociations (global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty navigationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation>(navigationPropertyInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of NavigationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region PersistentTypeHasAssociations link accessor
		/// <summary>
		/// Get the list of NavigationPropertyHasAssociation links to a PersistentTypeHasAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> GetLinksToNavigationProperties ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations persistentTypeHasAssociationsInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation>(persistentTypeHasAssociationsInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.PersistentTypeHasAssociationsDomainRoleId);
		}
		#endregion
		#region NavigationPropertyHasAssociation instance accessors
		
		/// <summary>
		/// Get any NavigationPropertyHasAssociation links between a given NavigationProperty and a PersistentTypeHasAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation link in links )
			{
				if ( target.Equals(link.PersistentTypeHasAssociations) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NavigationPropertyHasAssociation link between a given NavigationPropertyand a PersistentTypeHasAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation link in links )
			{
				if ( target.Equals(link.PersistentTypeHasAssociations) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship TypedEntitySetHasItemType
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7e98b08f-b820-44ca-8199-4cb9784fa116")]
	internal partial class TypedEntitySetHasItemType : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TypedEntitySetHasItemType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e98b08f, 0xb820, 0x44ca, 0x81, 0x99, 0x4c, 0xb9, 0x78, 0x4f, 0xa1, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TypedEntitySetHasItemType link in the same Partition as the given TypedEntitySet
		/// </summary>
		/// <param name="source">TypedEntitySet to use as the source of the relationship.</param>
		/// <param name="target">Interface to use as the target of the relationship.</param>
		internal TypedEntitySetHasItemType(TypedEntitySet source, Interface target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TypedEntitySetHasItemType.TypedEntitySetDomainRoleId, source), new DslModeling::RoleAssignment(TypedEntitySetHasItemType.TypeOfItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TypedEntitySetHasItemType(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TypedEntitySetHasItemType(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TypedEntitySetHasItemType(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TypedEntitySetHasItemType(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region TypedEntitySet domain role code
		
		/// <summary>
		/// TypedEntitySet domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypedEntitySetDomainRoleId = new global::System.Guid(0x2b6a7e22, 0xc6c0, 0x41b3, 0x93, 0x2c, 0x0b, 0x42, 0x59, 0xee, 0x67, 0xab);
		
		/// <summary>
		/// DomainRole TypedEntitySet
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySet
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypedEntitySet.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypedEntitySet.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ItemType", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypedEntitySet.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("2b6a7e22-c6c0-41b3-932c-0b4259ee67ab")]
		internal virtual TypedEntitySet TypedEntitySet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypedEntitySet)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypedEntitySetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypedEntitySetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypedEntitySets of a Interface
		/// <summary>
		/// Gets a list of TypedEntitySets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<TypedEntitySet> GetTypedEntitySets(Interface element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<TypedEntitySet>, TypedEntitySet>(element, TypeOfItemDomainRoleId);
		}
		#endregion
		#region TypeOfItem domain role code
		
		/// <summary>
		/// TypeOfItem domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeOfItemDomainRoleId = new global::System.Guid(0xc2275136, 0xc032, 0x4115, 0x9b, 0x31, 0xbf, 0x20, 0x12, 0xda, 0xde, 0x70);
		
		/// <summary>
		/// DomainRole TypeOfItem
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypeOfItem
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypeOfItem.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypeOfItem.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TypedEntitySets", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/TypeOfItem.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c2275136-c032-4115-9b31-bf2012dade70")]
		internal virtual Interface TypeOfItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Interface)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeOfItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeOfItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ItemType of a TypedEntitySet
		/// <summary>
		/// Gets ItemType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static Interface GetItemType(TypedEntitySet element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypedEntitySetDomainRoleId) as Interface;
		}
		
		/// <summary>
		/// Sets ItemType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetItemType(TypedEntitySet element, Interface newTypeOfItem)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypedEntitySetDomainRoleId, newTypeOfItem);
		}
		#endregion
		#region ResultTypeName domain property code
		
		/// <summary>
		/// ResultTypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ResultTypeNameDomainPropertyId = new global::System.Guid(0xbeb44acf, 0x1005, 0x4e35, 0x95, 0x2f, 0x40, 0x9b, 0x3f, 0xc6, 0xde, 0x22);
		
		/// <summary>
		/// Gets or sets the value of ResultTypeName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/ResultTypeName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType/ResultTypeName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("beb44acf-1005-4e35-952f-409b3fc6de22")]
		public global::System.String ResultTypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ResultTypeNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the TypedEntitySetHasItemType.ResultTypeName domain property.
		/// </summary>
		internal sealed partial class ResultTypeNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<TypedEntitySetHasItemType, global::System.String>
		{
			private ResultTypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the TypedEntitySetHasItemType.ResultTypeName domain property value handler.
			/// </summary>
			public static readonly ResultTypeNamePropertyHandler Instance = new ResultTypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the TypedEntitySetHasItemType.ResultTypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ResultTypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(TypedEntitySetHasItemType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ResultTypeName because its Kind is
				// set to Calculated. Please provide the GetResultTypeNameValue()
				// method on the domain class.
				return element.GetResultTypeNameValue();
			}
		
		}
		
		#endregion
		#region TypedEntitySet link accessor
		/// <summary>
		/// Get the TypedEntitySetHasItemType link to a TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType GetLinkToItemType (global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet typedEntitySetInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType>(typedEntitySetInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySetDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of TypedEntitySet not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TypeOfItem link accessor
		/// <summary>
		/// Get the list of TypedEntitySetHasItemType links to a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> GetLinksToTypedEntitySets ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface typeOfItemInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType>(typeOfItemInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypeOfItemDomainRoleId);
		}
		#endregion
		#region TypedEntitySetHasItemType instance accessors
		
		/// <summary>
		/// Get any TypedEntitySetHasItemType links between a given TypedEntitySet and a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySetDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType link in links )
			{
				if ( target.Equals(link.TypeOfItem) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TypedEntitySetHasItemType link between a given TypedEntitySetand a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySetDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType link in links )
			{
				if ( target.Equals(link.TypeOfItem) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship InterfaceHasIndexes
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("c162aa7a-06c8-46d4-9892-bda1cf940641")]
	internal partial class InterfaceHasIndexes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceHasIndexes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc162aa7a, 0x06c8, 0x46d4, 0x98, 0x92, 0xbd, 0xa1, 0xcf, 0x94, 0x06, 0x41);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceHasIndexes link in the same Partition as the given Interface
		/// </summary>
		/// <param name="source">Interface to use as the source of the relationship.</param>
		/// <param name="target">EntityIndex to use as the target of the relationship.</param>
		internal InterfaceHasIndexes(Interface source, EntityIndex target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceHasIndexes.IndexesDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceHasIndexes.InterfaceOfIndexDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasIndexes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasIndexes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasIndexes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasIndexes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Indexes domain role code
		
		/// <summary>
		/// Indexes domain role Id.
		/// </summary>
		public static readonly global::System.Guid IndexesDomainRoleId = new global::System.Guid(0x8511a387, 0x1d33, 0x4646, 0x8d, 0xdd, 0x7e, 0x9e, 0xf7, 0xa1, 0x14, 0xad);
		
		/// <summary>
		/// DomainRole Indexes
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.Indexes
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/Indexes.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/Indexes.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Indexes", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/Indexes.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8511a387-1d33-4646-8ddd-7e9ef7a114ad")]
		internal virtual Interface Indexes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Interface)DslModeling::DomainRoleInfo.GetRolePlayer(this, IndexesDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IndexesDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access InterfaceOfIndex of a EntityIndex
		/// <summary>
		/// Gets InterfaceOfIndex.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static Interface GetInterfaceOfIndex(EntityIndex element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, InterfaceOfIndexDomainRoleId) as Interface;
		}
		
		/// <summary>
		/// Sets InterfaceOfIndex.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetInterfaceOfIndex(EntityIndex element, Interface newIndexes)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, InterfaceOfIndexDomainRoleId, newIndexes);
		}
		#endregion
		#region InterfaceOfIndex domain role code
		
		/// <summary>
		/// InterfaceOfIndex domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceOfIndexDomainRoleId = new global::System.Guid(0x18f5599f, 0xe545, 0x4af0, 0xbe, 0xa5, 0xe7, 0xb4, 0xd8, 0xf9, 0x1c, 0xc3);
		
		/// <summary>
		/// DomainRole InterfaceOfIndex
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.InterfaceOfIndex
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/InterfaceOfIndex.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/InterfaceOfIndex.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "InterfaceOfIndex", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes/InterfaceOfIndex.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("18f5599f-e545-4af0-bea5-e7b4d8f91cc3")]
		internal virtual EntityIndex InterfaceOfIndex
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityIndex)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceOfIndexDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceOfIndexDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Indexes of a Interface
		/// <summary>
		/// Gets a list of Indexes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<EntityIndex> GetIndexes(Interface element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EntityIndex>, EntityIndex>(element, IndexesDomainRoleId);
		}
		#endregion
		#region Indexes link accessor
		/// <summary>
		/// Get the list of InterfaceHasIndexes links to a Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> GetLinksToIndexes ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface indexesInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes>(indexesInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.IndexesDomainRoleId);
		}
		#endregion
		#region InterfaceOfIndex link accessor
		/// <summary>
		/// Get the InterfaceHasIndexes link to a EntityIndex.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes GetLinkToInterfaceOfIndex (global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex interfaceOfIndexInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes>(interfaceOfIndexInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.InterfaceOfIndexDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of InterfaceOfIndex not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceHasIndexes instance accessors
		
		/// <summary>
		/// Get any InterfaceHasIndexes links between a given Interface and a EntityIndex.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.IndexesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes link in links )
			{
				if ( target.Equals(link.InterfaceOfIndex) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceHasIndexes link between a given Interfaceand a EntityIndex.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.IndexesDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes link in links )
			{
				if ( target.Equals(link.InterfaceOfIndex) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship NavigationPropertyHasTypedEntitySet
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("7f89ec29-c4a9-4cd4-8aec-da24bc65ffb2")]
	internal partial class NavigationPropertyHasTypedEntitySet : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NavigationPropertyHasTypedEntitySet domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7f89ec29, 0xc4a9, 0x4cd4, 0x8a, 0xec, 0xda, 0x24, 0xbc, 0x65, 0xff, 0xb2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NavigationPropertyHasTypedEntitySet link in the same Partition as the given NavigationProperty
		/// </summary>
		/// <param name="source">NavigationProperty to use as the source of the relationship.</param>
		/// <param name="target">TypedEntitySet to use as the target of the relationship.</param>
		internal NavigationPropertyHasTypedEntitySet(NavigationProperty source, TypedEntitySet target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId, source), new DslModeling::RoleAssignment(NavigationPropertyHasTypedEntitySet.TypedEntitySetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NavigationPropertyHasTypedEntitySet(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NavigationPropertyHasTypedEntitySet(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NavigationPropertyHasTypedEntitySet(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NavigationPropertyHasTypedEntitySet(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region OwnerNavigationProperty domain role code
		
		/// <summary>
		/// OwnerNavigationProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid OwnerNavigationPropertyDomainRoleId = new global::System.Guid(0xeed2b8ef, 0xb63a, 0x4d03, 0xbe, 0x29, 0xb4, 0x9b, 0x39, 0x75, 0x40, 0x66);
		
		/// <summary>
		/// DomainRole OwnerNavigationProperty
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationProperty
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/OwnerNavigationProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/OwnerNavigationProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TypedEntitySet", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/OwnerNavigationProperty.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("eed2b8ef-b63a-4d03-be29-b49b39754066")]
		internal virtual NavigationProperty OwnerNavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (NavigationProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, OwnerNavigationPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OwnerNavigationPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypedEntitySetNavigationProperties of a TypedEntitySet
		/// <summary>
		/// Gets a list of TypedEntitySetNavigationProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<NavigationProperty> GetTypedEntitySetNavigationProperties(TypedEntitySet element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(element, TypedEntitySetDomainRoleId);
		}
		#endregion
		#region TypedEntitySet domain role code
		
		/// <summary>
		/// TypedEntitySet domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypedEntitySetDomainRoleId = new global::System.Guid(0x3b202d34, 0x7d0f, 0x49a5, 0xbf, 0xee, 0x84, 0x73, 0x6d, 0x12, 0xc9, 0x08);
		
		/// <summary>
		/// DomainRole TypedEntitySet
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.TypedEntitySet
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/TypedEntitySet.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/TypedEntitySet.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "TypedEntitySetNavigationProperties", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet/TypedEntitySet.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b202d34-7d0f-49a5-bfee-84736d12c908")]
		internal virtual TypedEntitySet TypedEntitySet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (TypedEntitySet)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypedEntitySetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypedEntitySetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TypedEntitySet of a NavigationProperty
		/// <summary>
		/// Gets TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static TypedEntitySet GetTypedEntitySet(NavigationProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OwnerNavigationPropertyDomainRoleId) as TypedEntitySet;
		}
		
		/// <summary>
		/// Sets TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetTypedEntitySet(NavigationProperty element, TypedEntitySet newTypedEntitySet)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OwnerNavigationPropertyDomainRoleId, newTypedEntitySet);
		}
		#endregion
		#region OwnerNavigationProperty link accessor
		/// <summary>
		/// Get the NavigationPropertyHasTypedEntitySet link to a NavigationProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet GetLinkToTypedEntitySet (global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty ownerNavigationPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet>(ownerNavigationPropertyInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of OwnerNavigationProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TypedEntitySet link accessor
		/// <summary>
		/// Get the list of NavigationPropertyHasTypedEntitySet links to a TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> GetLinksToTypedEntitySetNavigationProperties ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet typedEntitySetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet>(typedEntitySetInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.TypedEntitySetDomainRoleId);
		}
		#endregion
		#region NavigationPropertyHasTypedEntitySet instance accessors
		
		/// <summary>
		/// Get any NavigationPropertyHasTypedEntitySet links between a given NavigationProperty and a TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet link in links )
			{
				if ( target.Equals(link.TypedEntitySet) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NavigationPropertyHasTypedEntitySet link between a given NavigationPropertyand a TypedEntitySet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet link in links )
			{
				if ( target.Equals(link.TypedEntitySet) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainRelationship EntityModelHasDomainTypes
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("77cdd6f4-e2db-4117-9830-42c37e33e0b7")]
	internal partial class EntityModelHasDomainTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EntityModelHasDomainTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x77cdd6f4, 0xe2db, 0x4117, 0x98, 0x30, 0x42, 0xc3, 0x7e, 0x33, 0xe0, 0xb7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EntityModelHasDomainTypes link in the same Partition as the given EntityModel
		/// </summary>
		/// <param name="source">EntityModel to use as the source of the relationship.</param>
		/// <param name="target">DomainType to use as the target of the relationship.</param>
		internal EntityModelHasDomainTypes(EntityModel source, DomainType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EntityModelHasDomainTypes.EntityModelDomainRoleId, source), new DslModeling::RoleAssignment(EntityModelHasDomainTypes.DomainTypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelHasDomainTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelHasDomainTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EntityModelHasDomainTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EntityModelHasDomainTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EntityModel domain role code
		
		/// <summary>
		/// EntityModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid EntityModelDomainRoleId = new global::System.Guid(0x2a9db156, 0xc9e2, 0x45c0, 0xa1, 0xb8, 0xd2, 0x84, 0x21, 0x24, 0x38, 0xe4);
		
		/// <summary>
		/// DomainRole EntityModel
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/EntityModel.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/EntityModel.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "DomainTypes", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/EntityModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2a9db156-c9e2-45c0-a1b8-d284212438e4")]
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EntityModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, EntityModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EntityModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EntityModel of a DomainType
		/// <summary>
		/// Gets EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static EntityModel GetEntityModel(DomainType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, DomainTypeDomainRoleId) as EntityModel;
		}
		
		/// <summary>
		/// Sets EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static void SetEntityModel(DomainType element, EntityModel newEntityModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, DomainTypeDomainRoleId, newEntityModel);
		}
		#endregion
		#region DomainType domain role code
		
		/// <summary>
		/// DomainType domain role Id.
		/// </summary>
		public static readonly global::System.Guid DomainTypeDomainRoleId = new global::System.Guid(0x988ef68c, 0x14a5, 0x403c, 0x98, 0xc4, 0x83, 0x14, 0x71, 0x44, 0xca, 0x6f);
		
		/// <summary>
		/// DomainRole DomainType
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/DomainType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/DomainType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EntityModel", PropertyDisplayNameKey="TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes/DomainType.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("988ef68c-14a5-403c-98c4-83147144ca6f")]
		internal virtual DomainType DomainType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DomainType)DslModeling::DomainRoleInfo.GetRolePlayer(this, DomainTypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DomainTypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DomainTypes of a EntityModel
		/// <summary>
		/// Gets a list of DomainTypes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static DslModeling::LinkedElementCollection<DomainType> GetDomainTypes(EntityModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<DomainType>, DomainType>(element, EntityModelDomainRoleId);
		}
		#endregion
		#region EntityModel link accessor
		/// <summary>
		/// Get the list of EntityModelHasDomainTypes links to a EntityModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> GetLinksToDomainTypes ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel entityModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes>(entityModelInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.EntityModelDomainRoleId);
		}
		#endregion
		#region DomainType link accessor
		/// <summary>
		/// Get the EntityModelHasDomainTypes link to a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes GetLinkToEntityModel (global::TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType domainTypeInstance)
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes>(domainTypeInstance, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.DomainTypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of DomainType not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EntityModelHasDomainTypes instance accessors
		
		/// <summary>
		/// Get any EntityModelHasDomainTypes links between a given EntityModel and a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::System.Collections.ObjectModel.ReadOnlyCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> GetLinks( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType target )
		{
			global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> outLinks = new global::System.Collections.Generic.List<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes>();
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.EntityModelDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EntityModelHasDomainTypes link between a given EntityModeland a DomainType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		internal static global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes GetLink( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType target )
		{
			global::System.Collections.Generic.IList<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes>(source, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.EntityModelDomainRoleId);
			foreach ( global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes link in links )
			{
				if ( target.Equals(link.DomainType) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
