//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;

#region Custom property definitions for Interface
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	
	/// <summary>
	/// Factory class for Interface type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class InterfaceTypeDescriptionProvider : InterfaceTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InterfaceTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for Interface type descriptors.
	/// </summary>
	abstract internal class InterfaceTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new InterfaceTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for Interface elements.
	/// </summary>
	public partial class InterfaceTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public InterfaceTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of Interface.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    Interface source = this.ModelElement as Interface;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for PropertyBase
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	
	/// <summary>
	/// Factory class for PropertyBase type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class PropertyBaseTypeDescriptionProvider : PropertyBaseTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PropertyBaseTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for PropertyBase type descriptors.
	/// </summary>
	abstract internal class PropertyBaseTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new PropertyBaseTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for PropertyBase elements.
	/// </summary>
	public partial class PropertyBaseTypeDescriptor : DslDesign::ElementTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public PropertyBaseTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of PropertyBase.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    PropertyBase source = this.ModelElement as PropertyBase;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
#region Custom property definitions for NavigationProperty
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	
	/// <summary>
	/// Factory class for NavigationProperty type descriptors.
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal sealed partial class NavigationPropertyTypeDescriptionProvider : NavigationPropertyTypeDescriptionProviderBase
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NavigationPropertyTypeDescriptionProvider()
		{
		}
		
	}
	
	/// <summary>
	/// Base factory class for NavigationProperty type descriptors.
	/// </summary>
	abstract internal class NavigationPropertyTypeDescriptionProviderBase : DslDesign::ElementTypeDescriptionProvider
	{
		/// <summary>
		/// Called by the System.ComponentModel framework when it requires a type descriptor instance.
		/// </summary>
		protected override DslDesign::ElementTypeDescriptor CreateTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, DslModeling::ModelElement element)
		{
			return new NavigationPropertyTypeDescriptor(parent, element);
		}
	}
	
	/// <summary>
	/// Custom type descriptor class for NavigationProperty elements.
	/// </summary>
	public partial class NavigationPropertyTypeDescriptor : global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBaseTypeDescriptor
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public NavigationPropertyTypeDescriptor(global::System.ComponentModel.ICustomTypeDescriptor parent, 
											DslModeling::ModelElement selectedElement)
			: base(parent, selectedElement)
		{
		}
	
	
		public override global::System.ComponentModel.PropertyDescriptorCollection GetProperties(global::System.Attribute[] attributes)
		{
			// The following method needs to be added in a partial class
			//   private override global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
			// The skeleton of a suggested method is provided in the comment below.
			return this.GetCustomProperties(attributes);
	
		}
	
		// EXAMPLE "GetCustomProperties" METHOD
		///// <summary>
		///// Returns a collection of property descriptors an instance of NavigationProperty.
		///// </summary>
		//private global::System.ComponentModel.PropertyDescriptorCollection GetCustomProperties(global::System.Attribute[] attributes)
		//{
		//    // Get the default property descriptors from the base class
		//    global::System.ComponentModel.PropertyDescriptorCollection propertyDescriptors = base.GetProperties(attributes);
	
		//    // Get a reference to the model element that is being described.
		//    NavigationProperty source = this.ModelElement as NavigationProperty;
		//    if (source != null)
		//    {
		//        //Add in extra custom properties here...
		//    }
	
		//    // Return the property descriptors for this element
		//    return propertyDescriptors;
		//}
	
	}
	
	
}
#endregion
