//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass EntityModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("80d70f04-2f78-4427-a240-e99fe6bec68a")]
	public partial class EntityModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x80d70f04, 0x2f78, 0x4427, 0xa2, 0x40, 0xe9, 0x9f, 0xe6, 0xbe, 0xc6, 0x8a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0x11c032a8, 0x2ba1, 0x407e, 0x9d, 0x52, 0x29, 0x13, 0x09, 0x78, 0x95, 0x23);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/Namespace.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/Namespace.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("11c032a8-2ba1-407e-9d52-291309789523")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityModel.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityModel, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityModel.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityModel.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot domain property code
		
		/// <summary>
		/// ModelRoot domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainPropertyId = new global::System.Guid(0x24d997f7, 0x79ff, 0x4c51, 0xac, 0x38, 0x50, 0x77, 0x86, 0x3c, 0xfd, 0xbc);
		
		/// <summary>
		/// Gets or sets the value of ModelRoot domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/ModelRoot.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/ModelRoot.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("24d997f7-79ff-4c51-ac38-5077863cfdbc")]
		public IModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ModelRootPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the EntityModel.ModelRoot domain property.
		/// </summary>
		internal sealed partial class ModelRootPropertyHandler : DslModeling::CalculatedPropertyValueHandler<EntityModel, IModelRoot>
		{
			private ModelRootPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityModel.ModelRoot domain property value handler.
			/// </summary>
			public static readonly ModelRootPropertyHandler Instance = new ModelRootPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityModel.ModelRoot domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelRootDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IModelRoot GetValue(EntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ModelRoot because its Kind is
				// set to Calculated. Please provide the GetModelRootValue()
				// method on the domain class.
				return element.GetModelRootValue();
			}
		
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x1dae6de8, 0x9c44, 0x4185, 0x89, 0x8e, 0x60, 0xd4, 0xc5, 0xd7, 0x1f, 0xf6);
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel.Version
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/Version.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel/Version.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("1dae6de8-9c44-4185-898e-60d4c5d71ff6")]
		public global::System.String Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return VersionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the EntityModel.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<EntityModel, global::System.String>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityModel.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityModel.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Version because its Kind is
				// set to Calculated. Please provide the GetVersionValue()
				// method on the domain class.
				return element.GetVersionValue();
			}
		
		}
		
		#endregion
		#region PersistentTypes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PersistentTypes.
		/// </summary>
		internal virtual DslModeling::LinkedElementCollection<PersistentType> PersistentTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentType>, PersistentType>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.EntityModelDomainRoleId);
			}
		}
		#endregion
		#region DomainTypes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of DomainTypes.
		/// </summary>
		internal virtual DslModeling::LinkedElementCollection<DomainType> DomainTypes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<DomainType>, DomainType>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.EntityModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType sourcePersistentType1 = sourceElement as global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType;
			if (sourcePersistentType1 != null)
			{
				// Create link for path EntityModelHasPersistentTypes.PersistentTypes
				this.PersistentTypes.Add(sourcePersistentType1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType sourcePersistentType1 = sourceElement as global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType;
			if (sourcePersistentType1 != null)
			{
				// Delete link for path EntityModelHasPersistentTypes.PersistentTypes
				
				foreach (DslModeling::ElementLink link in global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.GetLinks((global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel)this, sourcePersistentType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.EntityModelDomainRoleId, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass PersistentType
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("e3924dcc-7d94-47e0-b067-379b4ee51266")]
	internal abstract partial class PersistentType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PersistentType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3924dcc, 0x7d94, 0x47e0, 0xb0, 0x67, 0x37, 0x9b, 0x4e, 0xe5, 0x12, 0x66);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//protected PersistentType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xba091093, 0x9248, 0x4c23, 0xb5, 0x84, 0x3b, 0xb9, 0x6e, 0x31, 0x6b, 0x96);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Name.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Name.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ba091093-9248-4c23-b584-3bb96e316b96")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xd707c727, 0x1db8, 0x4b1e, 0xb8, 0x60, 0xe9, 0x4d, 0x29, 0xab, 0x78, 0xe2);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Namespace.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Namespace.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d707c727-1db8-4b1e-b860-e94d29ab78e2")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentType, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeName domain property code
		
		/// <summary>
		/// TypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeNameDomainPropertyId = new global::System.Guid(0xc58584b6, 0x3201, 0x4b11, 0x9d, 0x42, 0x03, 0x14, 0x18, 0xa5, 0x57, 0x90);
		
		/// <summary>
		/// Gets or sets the value of TypeName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("c58584b6-3201-4b11-9d42-031418a55790")]
		public global::System.String TypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.TypeName domain property.
		/// </summary>
		internal sealed partial class TypeNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentType, global::System.String>
		{
			private TypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.TypeName domain property value handler.
			/// </summary>
			public static readonly TypeNamePropertyHandler Instance = new TypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.TypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeName because its Kind is
				// set to Calculated. Please provide the GetTypeNameValue()
				// method on the domain class.
				return element.GetTypeNameValue();
			}
		
		}
		
		#endregion
		#region Access domain property code
		
		/// <summary>
		/// Access domain property Id.
		/// </summary>
		public static readonly global::System.Guid AccessDomainPropertyId = new global::System.Guid(0xf1991af7, 0x0111, 0x4195, 0xb3, 0x22, 0x15, 0xf6, 0xee, 0xdc, 0x26, 0x42);
		
		/// <summary>
		/// Storage for Access
		/// </summary>
		private AccessModifier accessPropertyStorage = AccessModifier.Public;
		
		/// <summary>
		/// Gets or sets the value of Access domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Access.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Access.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(AccessModifier.Public)]
		[DslModeling::DomainObjectId("f1991af7-0111-4195-b322-15f6eedc2642")]
		public AccessModifier Access
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return accessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.Access domain property.
		/// </summary>
		internal sealed partial class AccessPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentType, AccessModifier>
		{
			private AccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.Access domain property value handler.
			/// </summary>
			public static readonly AccessPropertyHandler Instance = new AccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.Access domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed AccessModifier GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.accessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentType element, AccessModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				AccessModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.accessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InheritsFrom domain property code
		
		/// <summary>
		/// InheritsFrom domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritsFromDomainPropertyId = new global::System.Guid(0x8115e9cf, 0xc284, 0x46e5, 0xb5, 0x81, 0x7b, 0x41, 0xd4, 0xb5, 0x0b, 0xfd);
		
		/// <summary>
		/// Gets or sets the value of InheritsFrom domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/InheritsFrom.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/InheritsFrom.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("8115e9cf-c284-46e5-b581-7b41d4b50bfd")]
		public global::System.Boolean InheritsFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return InheritsFromPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.InheritsFrom domain property.
		/// </summary>
		internal sealed partial class InheritsFromPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentType, global::System.Boolean>
		{
			private InheritsFromPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.InheritsFrom domain property value handler.
			/// </summary>
			public static readonly InheritsFromPropertyHandler Instance = new InheritsFromPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.InheritsFrom domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritsFromDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for InheritsFrom because its Kind is
				// set to Calculated. Please provide the GetInheritsFromValue()
				// method on the domain class.
				return element.GetInheritsFromValue();
			}
		
		}
		
		#endregion
		#region InheritsFromName domain property code
		
		/// <summary>
		/// InheritsFromName domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritsFromNameDomainPropertyId = new global::System.Guid(0xc99d2699, 0x9e28, 0x489b, 0x84, 0xf2, 0x89, 0xc6, 0x77, 0xdb, 0xb6, 0x08);
		
		/// <summary>
		/// Gets or sets the value of InheritsFromName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/InheritsFromName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/InheritsFromName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("c99d2699-9e28-489b-84f2-89c677dbb608")]
		public global::System.String InheritsFromName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return InheritsFromNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.InheritsFromName domain property.
		/// </summary>
		internal sealed partial class InheritsFromNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentType, global::System.String>
		{
			private InheritsFromNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.InheritsFromName domain property value handler.
			/// </summary>
			public static readonly InheritsFromNamePropertyHandler Instance = new InheritsFromNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.InheritsFromName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritsFromNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for InheritsFromName because its Kind is
				// set to Calculated. Please provide the GetInheritsFromNameValue()
				// method on the domain class.
				return element.GetInheritsFromNameValue();
			}
		
		}
		
		#endregion
		#region TypeKind domain property code
		
		/// <summary>
		/// TypeKind domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeKindDomainPropertyId = new global::System.Guid(0x3cc68dd2, 0x3eea, 0x4019, 0x90, 0xa6, 0xbf, 0x45, 0x9e, 0x98, 0x63, 0x95);
		
		/// <summary>
		/// Gets or sets the value of TypeKind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeKind.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeKind.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("3cc68dd2-3eea-4019-90a6-bf459e986395")]
		public PersistentTypeKind TypeKind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeKindPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.TypeKind domain property.
		/// </summary>
		internal sealed partial class TypeKindPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentType, PersistentTypeKind>
		{
			private TypeKindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.TypeKind domain property value handler.
			/// </summary>
			public static readonly TypeKindPropertyHandler Instance = new TypeKindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.TypeKind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeKindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PersistentTypeKind GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeKind because its Kind is
				// set to Calculated. Please provide the GetTypeKindValue()
				// method on the domain class.
				return element.GetTypeKindValue();
			}
		
		}
		
		#endregion
		#region TypeDescription domain property code
		
		/// <summary>
		/// TypeDescription domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDescriptionDomainPropertyId = new global::System.Guid(0x5087c50d, 0x1cb3, 0x4677, 0xa9, 0x4c, 0xe3, 0x64, 0x3d, 0x08, 0xe9, 0xea);
		
		/// <summary>
		/// Gets or sets the value of TypeDescription domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeDescription.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/TypeDescription.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("5087c50d-1cb3-4677-a94c-e3643d08e9ea")]
		public global::System.String TypeDescription
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeDescriptionPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.TypeDescription domain property.
		/// </summary>
		internal sealed partial class TypeDescriptionPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PersistentType, global::System.String>
		{
			private TypeDescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.TypeDescription domain property value handler.
			/// </summary>
			public static readonly TypeDescriptionPropertyHandler Instance = new TypeDescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.TypeDescription domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeDescription because its Kind is
				// set to Calculated. Please provide the GetTypeDescriptionValue()
				// method on the domain class.
				return element.GetTypeDescriptionValue();
			}
		
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0xf967f0d5, 0x52e7, 0x4000, 0x91, 0x26, 0xc3, 0x30, 0x38, 0x5f, 0xfc, 0xba);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Documentation.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/Documentation.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f967f0d5-52e7-4000-9126-c330385ffcba")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentType, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataContract domain property code
		
		/// <summary>
		/// DataContract domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataContractDomainPropertyId = new global::System.Guid(0x28da08c8, 0xe890, 0x4c0a, 0xb6, 0x75, 0x7d, 0x7e, 0x37, 0xcf, 0x24, 0xf8);
		
		/// <summary>
		/// Storage for DataContract
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor dataContractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DataContract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/DataContract.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType/DataContract.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("28da08c8-e890-4c0a-b675-7d7e37cf24f8")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor DataContract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataContractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataContractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentType.DataContract domain property.
		/// </summary>
		internal sealed partial class DataContractPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentType, global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor>
		{
			private DataContractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentType.DataContract domain property value handler.
			/// </summary>
			public static readonly DataContractPropertyHandler Instance = new DataContractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentType.DataContract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataContractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor GetValue(PersistentType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataContractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentType element, global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.DataContractDescriptor oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataContractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityModel opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityModel.
		/// </summary>
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.ElementDomainRoleId) as EntityModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasPersistentTypes.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Properties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Properties.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.Properties
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PropertyBase> Properties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PropertyBase>, PropertyBase>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PropertiesDomainRoleId);
			}
		}
		#endregion
		#region NavigationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of NavigationProperties.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationProperties
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NavigationProperty> NavigationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.NavigationPropertiesDomainRoleId);
			}
		}
		#endregion
		#region PersistentTypeAssociations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of PersistentTypeAssociations.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.SourcePersistentType
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<PersistentType> PersistentTypeAssociations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<PersistentType>, PersistentType>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasAssociations.SourcePersistentTypeDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass Entity
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("a08b1b7a-9be5-4f93-b9a7-cc36dcdad1e8")]
	internal partial class Entity : EntityBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa08b1b7a, 0x9be5, 0x4f93, 0xb9, 0xa7, 0xcc, 0x36, 0xdc, 0xda, 0xd1, 0xe8);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region HierarchyRootAttribute domain property code
		
		/// <summary>
		/// HierarchyRootAttribute domain property Id.
		/// </summary>
		public static readonly global::System.Guid HierarchyRootAttributeDomainPropertyId = new global::System.Guid(0x802a1868, 0x3e11, 0x41a0, 0xa4, 0x51, 0xaa, 0xe3, 0xcd, 0xba, 0xdf, 0xa6);
		
		/// <summary>
		/// Storage for HierarchyRootAttribute
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute hierarchyRootAttributePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of HierarchyRootAttribute domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/HierarchyRootAttribute.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/HierarchyRootAttribute.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("802a1868-3e11-41a0-a451-aae3cdbadfa6")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute HierarchyRootAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return hierarchyRootAttributePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HierarchyRootAttributePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.HierarchyRootAttribute domain property.
		/// </summary>
		internal sealed partial class HierarchyRootAttributePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute>
		{
			private HierarchyRootAttributePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.HierarchyRootAttribute domain property value handler.
			/// </summary>
			public static readonly HierarchyRootAttributePropertyHandler Instance = new HierarchyRootAttributePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.HierarchyRootAttribute domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HierarchyRootAttributeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.hierarchyRootAttributePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmHierarchyRootAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.hierarchyRootAttributePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsHierarchyRoot domain property code
		
		/// <summary>
		/// IsHierarchyRoot domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsHierarchyRootDomainPropertyId = new global::System.Guid(0xb739264e, 0xa361, 0x45c5, 0x83, 0x8b, 0x74, 0xc4, 0x5f, 0x2a, 0x5d, 0x71);
		
		/// <summary>
		/// Gets or sets the value of IsHierarchyRoot domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/IsHierarchyRoot.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/IsHierarchyRoot.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("b739264e-a361-45c5-838b-74c45f2a5d71")]
		public global::System.Boolean IsHierarchyRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return IsHierarchyRootPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsHierarchyRoot domain property.
		/// </summary>
		internal sealed partial class IsHierarchyRootPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Entity, global::System.Boolean>
		{
			private IsHierarchyRootPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsHierarchyRoot domain property value handler.
			/// </summary>
			public static readonly IsHierarchyRootPropertyHandler Instance = new IsHierarchyRootPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsHierarchyRoot domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsHierarchyRootDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for IsHierarchyRoot because its Kind is
				// set to Calculated. Please provide the GetIsHierarchyRootValue()
				// method on the domain class.
				return element.GetIsHierarchyRootValue();
			}
		
		}
		
		#endregion
		#region KeyGenerator domain property code
		
		/// <summary>
		/// KeyGenerator domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyGeneratorDomainPropertyId = new global::System.Guid(0xbb52c836, 0x8ffe, 0x44ca, 0xa1, 0x01, 0x15, 0x26, 0x7f, 0x1f, 0x78, 0xd1);
		
		/// <summary>
		/// Storage for KeyGenerator
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute keyGeneratorPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of KeyGenerator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/KeyGenerator.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/KeyGenerator.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bb52c836-8ffe-44ca-a101-15267f1f78d1")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute KeyGenerator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyGeneratorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyGeneratorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.KeyGenerator domain property.
		/// </summary>
		internal sealed partial class KeyGeneratorPropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute>
		{
			private KeyGeneratorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.KeyGenerator domain property value handler.
			/// </summary>
			public static readonly KeyGeneratorPropertyHandler Instance = new KeyGeneratorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.KeyGenerator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyGeneratorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyGeneratorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyGeneratorAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyGeneratorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeDiscriminatorValue domain property code
		
		/// <summary>
		/// TypeDiscriminatorValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDiscriminatorValueDomainPropertyId = new global::System.Guid(0xb8e69e25, 0x1847, 0x4793, 0xb4, 0xc6, 0x26, 0x0d, 0x4c, 0x4e, 0x9e, 0x9a);
		
		/// <summary>
		/// Storage for TypeDiscriminatorValue
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute typeDiscriminatorValuePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TypeDiscriminatorValue domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/TypeDiscriminatorValue.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Entity/TypeDiscriminatorValue.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b8e69e25-1847-4793-b4c6-260d4c4e9e9a")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute TypeDiscriminatorValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typeDiscriminatorValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypeDiscriminatorValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.TypeDiscriminatorValue domain property.
		/// </summary>
		internal sealed partial class TypeDiscriminatorValuePropertyHandler : DslModeling::DomainPropertyValueHandler<Entity, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute>
		{
			private TypeDiscriminatorValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.TypeDiscriminatorValue domain property value handler.
			/// </summary>
			public static readonly TypeDiscriminatorValuePropertyHandler Instance = new TypeDiscriminatorValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.TypeDiscriminatorValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDiscriminatorValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute GetValue(Entity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typeDiscriminatorValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Entity element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmTypeDiscriminatorValueAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typeDiscriminatorValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass Structure
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Structure.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Structure.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("e7347eae-9f7f-4f9e-a625-4b1b60873992")]
	internal partial class Structure : EntityBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Structure domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe7347eae, 0x9f7f, 0x4f9e, 0xa6, 0x25, 0x4b, 0x1b, 0x60, 0x87, 0x39, 0x92);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Structure(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Structure(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TypeOf opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TypeOf.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.Structure
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StructureProperty> TypeOf
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StructureProperty>, StructureProperty>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructureDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass Interface
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(InterfaceTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("8a1292cb-aa81-4162-8136-58fe40187d83")]
	internal partial class Interface : PersistentType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Interface domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a1292cb, 0xaa81, 0x4162, 0x81, 0x36, 0x58, 0xfe, 0x40, 0x18, 0x7d, 0x83);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Interface(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Interface(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InheritInterfaces domain property code
		
		/// <summary>
		/// InheritInterfaces domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritInterfacesDomainPropertyId = new global::System.Guid(0xe62fe112, 0xa5f4, 0x493a, 0xb5, 0x2b, 0x3f, 0x04, 0x0a, 0x5c, 0x69, 0x46);
		
		/// <summary>
		/// Gets or sets the value of InheritInterfaces domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface/InheritInterfaces.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface/InheritInterfaces.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("e62fe112-a5f4-493a-b52b-3f040a5c6946")]
		public global::System.String InheritInterfaces
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return InheritInterfacesPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Interface.InheritInterfaces domain property.
		/// </summary>
		internal sealed partial class InheritInterfacesPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Interface, global::System.String>
		{
			private InheritInterfacesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Interface.InheritInterfaces domain property value handler.
			/// </summary>
			public static readonly InheritInterfacesPropertyHandler Instance = new InheritInterfacesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Interface.InheritInterfaces domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritInterfacesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Interface element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for InheritInterfaces because its Kind is
				// set to Calculated. Please provide the GetInheritInterfacesValue()
				// method on the domain class.
				return element.GetInheritInterfacesValue();
			}
		
		}
		
		#endregion
		#region InheritsIEntity domain property code
		
		/// <summary>
		/// InheritsIEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritsIEntityDomainPropertyId = new global::System.Guid(0x153d4790, 0xa381, 0x463f, 0xb5, 0xbd, 0x11, 0x7b, 0xb5, 0xbe, 0x60, 0x71);
		
		/// <summary>
		/// Storage for InheritsIEntity
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode inheritsIEntityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of InheritsIEntity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface/InheritsIEntity.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.Interface/InheritsIEntity.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("153d4790-a381-463f-b5bd-117bb5be6071")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode InheritsIEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inheritsIEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InheritsIEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Interface.InheritsIEntity domain property.
		/// </summary>
		internal sealed partial class InheritsIEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<Interface, global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode>
		{
			private InheritsIEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Interface.InheritsIEntity domain property value handler.
			/// </summary>
			public static readonly InheritsIEntityPropertyHandler Instance = new InheritsIEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Interface.InheritsIEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritsIEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode GetValue(Interface element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inheritsIEntityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Interface element, global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.InheritsIEntityMode oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inheritsIEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InheritedInterfaces opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InheritedInterfaces.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterface
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Interface> InheritedInterfaces
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Interface>, Interface>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.SourceInheritInterfaceDomainRoleId);
			}
		}
		#endregion
		#region InheritingByInterfaces opposite domain role accessor
		
		/// <summary>
		/// Gets a list of InheritingByInterfaces.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.TargetInheritByInterface
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Interface> InheritingByInterfaces
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Interface>, Interface>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceInheritInterfaces.TargetInheritByInterfaceDomainRoleId);
			}
		}
		#endregion
		#region TypedEntitySets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TypedEntitySets.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypeOfItem
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<TypedEntitySet> TypedEntitySets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<TypedEntitySet>, TypedEntitySet>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypeOfItemDomainRoleId);
			}
		}
		#endregion
		#region Indexes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Indexes.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.Indexes
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityIndex> Indexes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityIndex>, EntityIndex>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.IndexesDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass EntityBase
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("a444bbf1-d845-4765-9704-2973712543d2")]
	internal abstract partial class EntityBase : Interface
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa444bbf1, 0xd845, 0x4765, 0x97, 0x04, 0x29, 0x73, 0x71, 0x25, 0x43, 0xd2);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region InheritanceModifier domain property code
		
		/// <summary>
		/// InheritanceModifier domain property Id.
		/// </summary>
		public static readonly global::System.Guid InheritanceModifierDomainPropertyId = new global::System.Guid(0x03a89120, 0xaa19, 0x41c5, 0x84, 0x86, 0xd2, 0xda, 0x6b, 0x6a, 0x66, 0x8a);
		
		/// <summary>
		/// Storage for InheritanceModifier
		/// </summary>
		private InheritanceModifiers inheritanceModifierPropertyStorage = InheritanceModifiers.None;
		
		/// <summary>
		/// Gets or sets the value of InheritanceModifier domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase/InheritanceModifier.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase/InheritanceModifier.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifiers.None)]
		[DslModeling::DomainObjectId("03a89120-aa19-41c5-8486-d2da6b6a668a")]
		public InheritanceModifiers InheritanceModifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return inheritanceModifierPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InheritanceModifierPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityBase.InheritanceModifier domain property.
		/// </summary>
		internal sealed partial class InheritanceModifierPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, InheritanceModifiers>
		{
			private InheritanceModifierPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityBase.InheritanceModifier domain property value handler.
			/// </summary>
			public static readonly InheritanceModifierPropertyHandler Instance = new InheritanceModifierPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityBase.InheritanceModifier domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InheritanceModifierDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifiers GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.inheritanceModifierPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, InheritanceModifiers newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifiers oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.inheritanceModifierPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BaseType opposite domain role accessor
		/// <summary>
		/// Gets or sets BaseType.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBase
		/// </summary>
		internal virtual EntityBase BaseType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBaseDomainRoleId) as EntityBase;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.SourceEntityBaseDomainRoleId, value);
			}
		}
		#endregion
		#region BaseTypeOf opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BaseTypeOf.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.TargetEntityBase
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EntityBase> BaseTypeOf
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EntityBase>, EntityBase>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseHasBaseType.TargetEntityBaseDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass PropertyBase
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(PropertyBaseTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("09ba427a-0c25-4966-90ba-2e8e0df7e15e")]
	internal abstract partial class PropertyBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PropertyBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09ba427a, 0x0c25, 0x4966, 0x90, 0xba, 0x2e, 0x8e, 0x0d, 0xf7, 0xe1, 0x5e);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor.
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//protected PropertyBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc9bf73e8, 0x8d94, 0x4114, 0xb0, 0xaf, 0xea, 0x01, 0x72, 0xfa, 0x60, 0x1c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Name.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Name.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Name.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c9bf73e8-8d94-4114-b0af-ea0172fa601c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TypeName domain property code
		
		/// <summary>
		/// TypeName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeNameDomainPropertyId = new global::System.Guid(0xe220b206, 0x6c2e, 0x457e, 0xbc, 0x60, 0x00, 0xeb, 0xe5, 0x3e, 0x1a, 0xd1);
		
		/// <summary>
		/// Gets or sets the value of TypeName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/TypeName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/TypeName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("e220b206-6c2e-457e-bc60-00ebe53e1ad1")]
		public global::System.String TypeName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.TypeName domain property.
		/// </summary>
		internal sealed partial class TypeNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<PropertyBase, global::System.String>
		{
			private TypeNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.TypeName domain property value handler.
			/// </summary>
			public static readonly TypeNamePropertyHandler Instance = new TypeNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.TypeName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeName because its Kind is
				// set to Calculated. Please provide the GetTypeNameValue()
				// method on the domain class.
				return element.GetTypeNameValue();
			}
		
		}
		
		#endregion
		#region PropertyAccess domain property code
		
		/// <summary>
		/// PropertyAccess domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyAccessDomainPropertyId = new global::System.Guid(0xdeaf6e10, 0x5a17, 0x4a9e, 0x8d, 0xa9, 0x21, 0x8a, 0x0f, 0x76, 0xf2, 0x18);
		
		/// <summary>
		/// Storage for PropertyAccess
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers propertyAccessPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of PropertyAccess domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/PropertyAccess.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/PropertyAccess.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/PropertyAccess.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("deaf6e10-5a17-4a9e-8da9-218a0f76f218")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers PropertyAccess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyAccessPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyAccessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.PropertyAccess domain property.
		/// </summary>
		internal sealed partial class PropertyAccessPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers>
		{
			private PropertyAccessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.PropertyAccess domain property value handler.
			/// </summary>
			public static readonly PropertyAccessPropertyHandler Instance = new PropertyAccessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.PropertyAccess domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyAccessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyAccessPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.PropertyAccessModifiers oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyAccessPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsBrowsable domain property code
		
		/// <summary>
		/// IsBrowsable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsBrowsableDomainPropertyId = new global::System.Guid(0x52b48dbc, 0x1ee4, 0x4b43, 0xac, 0x1a, 0x4e, 0xf3, 0x19, 0x01, 0x9b, 0xd3);
		
		/// <summary>
		/// Storage for IsBrowsable
		/// </summary>
		private global::System.Boolean isBrowsablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of IsBrowsable domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/IsBrowsable.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/IsBrowsable.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/IsBrowsable.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("52b48dbc-1ee4-4b43-ac1a-4ef319019bd3")]
		public global::System.Boolean IsBrowsable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isBrowsablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsBrowsablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.IsBrowsable domain property.
		/// </summary>
		internal sealed partial class IsBrowsablePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::System.Boolean>
		{
			private IsBrowsablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.IsBrowsable domain property value handler.
			/// </summary>
			public static readonly IsBrowsablePropertyHandler Instance = new IsBrowsablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.IsBrowsable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsBrowsableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isBrowsablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isBrowsablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Documentation domain property code
		
		/// <summary>
		/// Documentation domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationDomainPropertyId = new global::System.Guid(0x0b4666da, 0xfb2b, 0x45c2, 0xb7, 0xe3, 0x6e, 0xfd, 0xf8, 0xb7, 0x9d, 0xb1);
		
		/// <summary>
		/// Storage for Documentation
		/// </summary>
		private global::System.String documentationPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Documentation domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Documentation.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Documentation.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Documentation.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0b4666da-fb2b-45c2-b7e3-6efdf8b79db1")]
		public global::System.String Documentation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.Documentation domain property.
		/// </summary>
		internal sealed partial class DocumentationPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::System.String>
		{
			private DocumentationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.Documentation domain property value handler.
			/// </summary>
			public static readonly DocumentationPropertyHandler Instance = new DocumentationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.Documentation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyKind domain property code
		
		/// <summary>
		/// PropertyKind domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyKindDomainPropertyId = new global::System.Guid(0xdbbd4741, 0x7088, 0x420c, 0x80, 0x01, 0x00, 0xb1, 0xe3, 0x95, 0x83, 0x88);
		
		/// <summary>
		/// Gets or sets the value of PropertyKind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/PropertyKind.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/PropertyKind.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("dbbd4741-7088-420c-8001-00b1e3958388")]
		public PropertyKind PropertyKind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PropertyKindPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.PropertyKind domain property.
		/// </summary>
		internal sealed partial class PropertyKindPropertyHandler : DslModeling::CalculatedPropertyValueHandler<PropertyBase, PropertyKind>
		{
			private PropertyKindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.PropertyKind domain property value handler.
			/// </summary>
			public static readonly PropertyKindPropertyHandler Instance = new PropertyKindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.PropertyKind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyKindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyKind GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for PropertyKind because its Kind is
				// set to Calculated. Please provide the GetPropertyKindValue()
				// method on the domain class.
				return element.GetPropertyKindValue();
			}
		
		}
		
		#endregion
		#region FieldAttribute domain property code
		
		/// <summary>
		/// FieldAttribute domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldAttributeDomainPropertyId = new global::System.Guid(0x466dc6ae, 0xffae, 0x4abc, 0xba, 0xf0, 0x83, 0x14, 0x3f, 0x14, 0x9d, 0xd1);
		
		/// <summary>
		/// Storage for FieldAttribute
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute fieldAttributePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FieldAttribute domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/FieldAttribute.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/FieldAttribute.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/FieldAttribute.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("466dc6ae-ffae-4abc-baf0-83143f149dd1")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute FieldAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldAttributePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldAttributePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.FieldAttribute domain property.
		/// </summary>
		internal sealed partial class FieldAttributePropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute>
		{
			private FieldAttributePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.FieldAttribute domain property value handler.
			/// </summary>
			public static readonly FieldAttributePropertyHandler Instance = new FieldAttributePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.FieldAttribute domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldAttributeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fieldAttributePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmFieldAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldAttributePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsInherited domain property code
		
		/// <summary>
		/// IsInherited domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInheritedDomainPropertyId = new global::System.Guid(0x34608f2d, 0x3b78, 0x46a6, 0x89, 0x74, 0xfd, 0x59, 0x1b, 0x2d, 0x1c, 0x74);
		
		/// <summary>
		/// Storage for IsInherited
		/// </summary>
		private global::System.Boolean isInheritedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsInherited domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/IsInherited.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/IsInherited.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("34608f2d-3b78-46a6-8974-fd591b2d1c74")]
		public global::System.Boolean IsInherited
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInheritedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInheritedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.IsInherited domain property.
		/// </summary>
		internal sealed partial class IsInheritedPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::System.Boolean>
		{
			private IsInheritedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.IsInherited domain property value handler.
			/// </summary>
			public static readonly IsInheritedPropertyHandler Instance = new IsInheritedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.IsInherited domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInheritedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInheritedPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInheritedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Constraints domain property code
		
		/// <summary>
		/// Constraints domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConstraintsDomainPropertyId = new global::System.Guid(0x960f3791, 0x72e6, 0x4f37, 0x90, 0xa4, 0xc0, 0xe9, 0xd3, 0x42, 0x65, 0x7c);
		
		/// <summary>
		/// Storage for Constraints
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints constraintsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Constraints domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Constraints.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/Constraints.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("960f3791-72e6-4f37-90a4-c0e9d342657c")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints Constraints
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return constraintsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConstraintsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.Constraints domain property.
		/// </summary>
		internal sealed partial class ConstraintsPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints>
		{
			private ConstraintsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.Constraints domain property value handler.
			/// </summary>
			public static readonly ConstraintsPropertyHandler Instance = new ConstraintsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.Constraints domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConstraintsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.constraintsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmPropertyConstraints oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.constraintsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataMember domain property code
		
		/// <summary>
		/// DataMember domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataMemberDomainPropertyId = new global::System.Guid(0xd5dc9119, 0x09c0, 0x4875, 0x86, 0x78, 0xf9, 0x23, 0x9d, 0xcc, 0x50, 0x95);
		
		/// <summary>
		/// Storage for DataMember
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor dataMemberPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DataMember domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.Data
		/// Member
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/DataMember.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase/DataMember.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5dc9119-09c0-4875-8678-f9239dcc5095")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor DataMember
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataMemberPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataMemberPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PropertyBase.DataMember domain property.
		/// </summary>
		internal sealed partial class DataMemberPropertyHandler : DslModeling::DomainPropertyValueHandler<PropertyBase, global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor>
		{
			private DataMemberPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PropertyBase.DataMember domain property value handler.
			/// </summary>
			public static readonly DataMemberPropertyHandler Instance = new DataMemberPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PropertyBase.DataMember domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataMemberDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor GetValue(PropertyBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataMemberPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PropertyBase element, global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.DataMemberDescriptor oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataMemberPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PersistentType opposite domain role accessor
		/// <summary>
		/// Gets or sets PersistentType.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PersistentType
		/// </summary>
		internal virtual PersistentType PersistentType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PersistentTypeDomainRoleId) as PersistentType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasProperties.PersistentTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass ScalarProperty
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("2217b5e9-a3f5-419c-a1a3-f45af68ea089")]
	internal partial class ScalarProperty : PropertyBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ScalarProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2217b5e9, 0xa3f5, 0x419c, 0xa1, 0xa3, 0xf4, 0x5a, 0xf6, 0x8e, 0xa0, 0x89);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ScalarProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ScalarProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region KeyAttribute domain property code
		
		/// <summary>
		/// KeyAttribute domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyAttributeDomainPropertyId = new global::System.Guid(0xa89b5e56, 0xf2b5, 0x49d5, 0xaf, 0xc1, 0x83, 0xd2, 0xfc, 0xec, 0xc8, 0x2c);
		
		/// <summary>
		/// Storage for KeyAttribute
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute keyAttributePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of KeyAttribute domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty/KeyAttribute.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty/KeyAttribute.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty/KeyAttribute.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a89b5e56-f2b5-49d5-afc1-83d2fcecc82c")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute KeyAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyAttributePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyAttributePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ScalarProperty.KeyAttribute domain property.
		/// </summary>
		internal sealed partial class KeyAttributePropertyHandler : DslModeling::DomainPropertyValueHandler<ScalarProperty, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute>
		{
			private KeyAttributePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ScalarProperty.KeyAttribute domain property value handler.
			/// </summary>
			public static readonly KeyAttributePropertyHandler Instance = new KeyAttributePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ScalarProperty.KeyAttribute domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyAttributeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute GetValue(ScalarProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyAttributePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ScalarProperty element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyAttributePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x2c6fba2a, 0xf452, 0x47f3, 0x8b, 0x44, 0x6c, 0xb9, 0xab, 0x0e, 0xc7, 0x9b);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private IDomainType typePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty.Type
		/// </summary>
		[System.ComponentModel.TypeConverterAttribute(typeof(TXSoftware.DataObjectsNetEntityModel.Dsl.DomainTypeTypeConverter))]
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty/Type.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.ScalarProperty/Type.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2c6fba2a-f452-47f3-8b44-6cb9ab0ec79b")]
		public IDomainType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ScalarProperty.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ScalarProperty, IDomainType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ScalarProperty.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ScalarProperty.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IDomainType GetValue(ScalarProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ScalarProperty element, IDomainType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IDomainType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass NavigationProperty
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.TypeDescriptionProvider(typeof(NavigationPropertyTypeDescriptionProvider))]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("7ebd18f3-60ee-4f87-9b1d-cb116c597900")]
	internal partial class NavigationProperty : PropertyBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NavigationProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7ebd18f3, 0x60ee, 0x4f87, 0x9b, 0x1d, 0xcb, 0x11, 0x6c, 0x59, 0x79, 0x00);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public NavigationProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public NavigationProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xff74466b, 0xf4dd, 0x4a83, 0xa1, 0x2a, 0xdf, 0x38, 0x2e, 0xeb, 0x20, 0x04);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind multiplicityPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/Multiplicity.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/Multiplicity.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ff74466b-f4dd-4a83-a12a-df382eeb2004")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.MultiplicityKind oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ReturnType domain property code
		
		/// <summary>
		/// ReturnType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ReturnTypeDomainPropertyId = new global::System.Guid(0x9817dfd0, 0x1c36, 0x45a8, 0xa7, 0x78, 0x71, 0x5b, 0x84, 0x89, 0x9a, 0x14);
		
		/// <summary>
		/// Gets or sets the value of ReturnType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/ReturnType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/ReturnType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("9817dfd0-1c36-45a8-a778-715b84899a14")]
		public global::System.String ReturnType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ReturnTypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.ReturnType domain property.
		/// </summary>
		internal sealed partial class ReturnTypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private ReturnTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.ReturnType domain property value handler.
			/// </summary>
			public static readonly ReturnTypePropertyHandler Instance = new ReturnTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.ReturnType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ReturnTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for ReturnType because its Kind is
				// set to Calculated. Please provide the GetReturnTypeValue()
				// method on the domain class.
				return element.GetReturnTypeValue();
			}
		
		}
		
		#endregion
		#region PairFrom domain property code
		
		/// <summary>
		/// PairFrom domain property Id.
		/// </summary>
		public static readonly global::System.Guid PairFromDomainPropertyId = new global::System.Guid(0x2cc176d1, 0x6041, 0x4391, 0x8c, 0x61, 0x73, 0xf1, 0x5d, 0x4e, 0xe5, 0xd9);
		
		/// <summary>
		/// Gets or sets the value of PairFrom domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/PairFrom.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/PairFrom.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("2cc176d1-6041-4391-8c61-73f15d4ee5d9")]
		public global::System.String PairFrom
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PairFromPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.PairFrom domain property.
		/// </summary>
		internal sealed partial class PairFromPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private PairFromPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.PairFrom domain property value handler.
			/// </summary>
			public static readonly PairFromPropertyHandler Instance = new PairFromPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.PairFrom domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PairFromDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for PairFrom because its Kind is
				// set to Calculated. Please provide the GetPairFromValue()
				// method on the domain class.
				return element.GetPairFromValue();
			}
		
		}
		
		#endregion
		#region PairTo domain property code
		
		/// <summary>
		/// PairTo domain property Id.
		/// </summary>
		public static readonly global::System.Guid PairToDomainPropertyId = new global::System.Guid(0x610b4518, 0x58f0, 0x4b7d, 0x97, 0xb3, 0xb6, 0x95, 0x0f, 0x30, 0x69, 0x5d);
		
		/// <summary>
		/// Gets or sets the value of PairTo domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/PairTo.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/PairTo.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("610b4518-58f0-4b7d-97b3-b6950f30695d")]
		public global::System.String PairTo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return PairToPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.PairTo domain property.
		/// </summary>
		internal sealed partial class PairToPropertyHandler : DslModeling::CalculatedPropertyValueHandler<NavigationProperty, global::System.String>
		{
			private PairToPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.PairTo domain property value handler.
			/// </summary>
			public static readonly PairToPropertyHandler Instance = new PairToPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.PairTo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PairToDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for PairTo because its Kind is
				// set to Calculated. Please provide the GetPairToValue()
				// method on the domain class.
				return element.GetPairToValue();
			}
		
		}
		
		#endregion
		#region KeyAttribute domain property code
		
		/// <summary>
		/// KeyAttribute domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyAttributeDomainPropertyId = new global::System.Guid(0xf1aa2dcb, 0x37cc, 0x433f, 0x89, 0x14, 0x81, 0x97, 0x0d, 0x18, 0x43, 0x2c);
		
		/// <summary>
		/// Storage for KeyAttribute
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute keyAttributePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of KeyAttribute domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/KeyAttribute.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/KeyAttribute.Category", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty/KeyAttribute.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f1aa2dcb-37cc-433f-8914-81970d18432c")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute KeyAttribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyAttributePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyAttributePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NavigationProperty.KeyAttribute domain property.
		/// </summary>
		internal sealed partial class KeyAttributePropertyHandler : DslModeling::DomainPropertyValueHandler<NavigationProperty, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute>
		{
			private KeyAttributePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NavigationProperty.KeyAttribute domain property value handler.
			/// </summary>
			public static readonly KeyAttributePropertyHandler Instance = new KeyAttributePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NavigationProperty.KeyAttribute domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyAttributeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute GetValue(NavigationProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyAttributePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NavigationProperty element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmKeyAttribute oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyAttributePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PersistentTypeOfNavigationProperty opposite domain role accessor
		/// <summary>
		/// Gets or sets PersistentTypeOfNavigationProperty.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationProperty
		/// </summary>
		internal virtual PersistentType PersistentTypeOfNavigationProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationPropertyDomainRoleId) as PersistentType;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentTypeHasNavigationProperties.PersistentTypeOfNavigationPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region PersistentTypeHasAssociations opposite domain role accessor
		/// <summary>
		/// Gets or sets PersistentTypeHasAssociations.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationProperty
		/// </summary>
		internal virtual PersistentTypeHasAssociations PersistentTypeHasAssociations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId) as PersistentTypeHasAssociations;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasAssociation.NavigationPropertyDomainRoleId, value);
			}
		}
		#endregion
		#region TypedEntitySet opposite domain role accessor
		/// <summary>
		/// Gets or sets TypedEntitySet.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationProperty
		/// </summary>
		internal virtual TypedEntitySet TypedEntitySet
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId) as TypedEntitySet;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.OwnerNavigationPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass StructureProperty
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructureProperty.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.StructureProperty.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("c2fb7628-9396-41a6-8dbc-306c80bed563")]
	internal partial class StructureProperty : PropertyBase
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// StructureProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2fb7628, 0x9396, 0x41a6, 0x8d, 0xbc, 0x30, 0x6c, 0x80, 0xbe, 0xd5, 0x63);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StructureProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StructureProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type opposite domain role accessor
		/// <summary>
		/// Gets or sets Type.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructureProperty
		/// </summary>
		internal virtual Structure Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructurePropertyDomainRoleId) as Structure;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.StructurePropertyHasType.StructurePropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass TypedEntitySet
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("3cff2aa3-0e4e-44fe-9883-78dbca2bf7ca")]
	internal partial class TypedEntitySet : PersistentType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypedEntitySet domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3cff2aa3, 0x0e4e, 0x44fe, 0x98, 0x83, 0x78, 0xdb, 0xca, 0x2b, 0xf7, 0xca);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TypedEntitySet(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TypedEntitySet(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ItemType opposite domain role accessor
		/// <summary>
		/// Gets or sets ItemType.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySet
		/// </summary>
		internal virtual Interface ItemType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySetDomainRoleId) as Interface;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetHasItemType.TypedEntitySetDomainRoleId, value);
			}
		}
		#endregion
		#region TypedEntitySetNavigationProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TypedEntitySetNavigationProperties.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.TypedEntitySet
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<NavigationProperty> TypedEntitySetNavigationProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<NavigationProperty>, NavigationProperty>(global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationPropertyHasTypedEntitySet.TypedEntitySetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass EntityIndex
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("56a29e4f-71e1-4715-baca-603b8c1b860a")]
	internal partial class EntityIndex : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityIndex domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56a29e4f, 0x71e1, 0x4715, 0xba, 0xca, 0x60, 0x3b, 0x8c, 0x1b, 0x86, 0x0a);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public EntityIndex(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public EntityIndex(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Unique domain property code
		
		/// <summary>
		/// Unique domain property Id.
		/// </summary>
		public static readonly global::System.Guid UniqueDomainPropertyId = new global::System.Guid(0xbbd1e345, 0x99a5, 0x464c, 0xb0, 0x78, 0xcb, 0x82, 0xdc, 0x68, 0x70, 0x81);
		
		/// <summary>
		/// Storage for Unique
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean> uniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Unique domain property.
		/// Indicating whether the index is unique.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Unique.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Unique.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bbd1e345-99a5-464c-b078-cb82dc687081")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean> Unique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return uniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.Unique domain property.
		/// </summary>
		internal sealed partial class UniquePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityIndex, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean>>
		{
			private UniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.Unique domain property value handler.
			/// </summary>
			public static readonly UniquePropertyHandler Instance = new UniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.Unique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean> GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.uniquePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityIndex element, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean> newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Boolean> oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.uniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FillFactor domain property code
		
		/// <summary>
		/// FillFactor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillFactorDomainPropertyId = new global::System.Guid(0x1b362c34, 0x9814, 0x4c72, 0x8a, 0xbf, 0x0b, 0x6b, 0xc9, 0xb7, 0x5a, 0x55);
		
		/// <summary>
		/// Storage for FillFactor
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double> fillFactorPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FillFactor domain property.
		/// Fill factor for this index, must be a real number between 0 and 1.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/FillFactor.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/FillFactor.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1b362c34-9814-4c72-8abf-0b6bc9b75a55")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double> FillFactor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fillFactorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillFactorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.FillFactor domain property.
		/// </summary>
		internal sealed partial class FillFactorPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityIndex, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double>>
		{
			private FillFactorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.FillFactor domain property value handler.
			/// </summary>
			public static readonly FillFactorPropertyHandler Instance = new FillFactorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.FillFactor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillFactorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double> GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fillFactorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityIndex element, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double> newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.Double> oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fillFactorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xdb5dfe67, 0x64f3, 0x40d3, 0xa5, 0x92, 0xab, 0x6e, 0x6a, 0xa4, 0x9f, 0xba);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Name.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Name.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("db5dfe67-64f3-40d3-a592-ab6e6aa49fba")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityIndex, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityIndex element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IndexName domain property code
		
		/// <summary>
		/// IndexName domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexNameDomainPropertyId = new global::System.Guid(0xd3e7c651, 0x8a89, 0x46fc, 0x99, 0x02, 0x01, 0xba, 0x15, 0x6a, 0x22, 0xb6);
		
		/// <summary>
		/// Storage for IndexName
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String> indexNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IndexName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/IndexName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/IndexName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d3e7c651-8a89-46fc-9902-01ba156a22b6")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String> IndexName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.IndexName domain property.
		/// </summary>
		internal sealed partial class IndexNamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityIndex, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String>>
		{
			private IndexNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.IndexName domain property value handler.
			/// </summary>
			public static readonly IndexNamePropertyHandler Instance = new IndexNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.IndexName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String> GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.indexNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityIndex element, global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String> newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.Defaultable<System.String> oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CalculatedName domain property code
		
		/// <summary>
		/// CalculatedName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CalculatedNameDomainPropertyId = new global::System.Guid(0x3c17157d, 0x8fa7, 0x451a, 0xb3, 0xf9, 0xfd, 0x8b, 0x55, 0xde, 0xbc, 0xe1);
		
		/// <summary>
		/// Gets or sets the value of CalculatedName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/CalculatedName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/CalculatedName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("3c17157d-8fa7-451a-b3f9-fd8b55debce1")]
		public global::System.String CalculatedName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CalculatedNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.CalculatedName domain property.
		/// </summary>
		internal sealed partial class CalculatedNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<EntityIndex, global::System.String>
		{
			private CalculatedNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.CalculatedName domain property value handler.
			/// </summary>
			public static readonly CalculatedNamePropertyHandler Instance = new CalculatedNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.CalculatedName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CalculatedNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CalculatedName because its Kind is
				// set to Calculated. Please provide the GetCalculatedNameValue()
				// method on the domain class.
				return element.GetCalculatedNameValue();
			}
		
		}
		
		#endregion
		#region Fields domain property code
		
		/// <summary>
		/// Fields domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldsDomainPropertyId = new global::System.Guid(0x9fccb352, 0x5294, 0x401b, 0x93, 0xe1, 0x56, 0x64, 0x9a, 0xc0, 0x1a, 0xae);
		
		/// <summary>
		/// Storage for Fields
		/// </summary>
		private global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields fieldsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Fields domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Fields.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex/Fields.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9fccb352-5294-401b-93e1-56649ac01aae")]
		public global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EntityIndex.Fields domain property.
		/// </summary>
		internal sealed partial class FieldsPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityIndex, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields>
		{
			private FieldsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EntityIndex.Fields domain property value handler.
			/// </summary>
			public static readonly FieldsPropertyHandler Instance = new FieldsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EntityIndex.Fields domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields GetValue(EntityIndex element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fieldsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityIndex element, global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::TXSoftware.DataObjectsNetEntityModel.Common.OrmIndexFields oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InterfaceOfIndex opposite domain role accessor
		/// <summary>
		/// Gets or sets InterfaceOfIndex.
		/// Description for
		/// TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.InterfaceOfIndex
		/// </summary>
		internal virtual Interface InterfaceOfIndex
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.InterfaceOfIndexDomainRoleId) as Interface;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceHasIndexes.InterfaceOfIndexDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// DomainClass DomainType
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("6881cfb0-e300-4d8b-8343-e1824c44c35a")]
	internal partial class DomainType : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DomainType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6881cfb0, 0xe300, 0x4d8b, 0x83, 0x43, 0xe1, 0x82, 0x4c, 0x44, 0xc3, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainType(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DomainType(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4f3a46e3, 0x4f34, 0x4bf3, 0xa5, 0x12, 0x9d, 0x3f, 0x89, 0x65, 0xa1, 0xba);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/Name.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/Name.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4f3a46e3-4f34-4bf3-a512-9d3f8965a1ba")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainType.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainType, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainType.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainType.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Namespace domain property code
		
		/// <summary>
		/// Namespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid NamespaceDomainPropertyId = new global::System.Guid(0xdc4d745e, 0xfafb, 0x4b75, 0x8d, 0x9d, 0x7c, 0x0b, 0x18, 0x77, 0x61, 0xfe);
		
		/// <summary>
		/// Storage for Namespace
		/// </summary>
		private global::System.String namespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Namespace domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/Namespace.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/Namespace.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dc4d745e-fafb-4b75-8d9d-7c0b187761fe")]
		public global::System.String Namespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainType.Namespace domain property.
		/// </summary>
		internal sealed partial class NamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<DomainType, global::System.String>
		{
			private NamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainType.Namespace domain property value handler.
			/// </summary>
			public static readonly NamespacePropertyHandler Instance = new NamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainType.Namespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namespacePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainType element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FullName domain property code
		
		/// <summary>
		/// FullName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FullNameDomainPropertyId = new global::System.Guid(0x4bfb499b, 0x1766, 0x4d3f, 0x8f, 0x3f, 0x05, 0xee, 0xe5, 0xfa, 0x82, 0xb4);
		
		/// <summary>
		/// Gets or sets the value of FullName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/FullName.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/FullName.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("4bfb499b-1766-4d3f-8f3f-05eee5fa82b4")]
		public global::System.String FullName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FullNamePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the DomainType.FullName domain property.
		/// </summary>
		internal sealed partial class FullNamePropertyHandler : DslModeling::CalculatedPropertyValueHandler<DomainType, global::System.String>
		{
			private FullNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainType.FullName domain property value handler.
			/// </summary>
			public static readonly FullNamePropertyHandler Instance = new FullNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainType.FullName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FullNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(DomainType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FullName because its Kind is
				// set to Calculated. Please provide the GetFullNameValue()
				// method on the domain class.
				return element.GetFullNameValue();
			}
		
		}
		
		#endregion
		#region IsBuildIn domain property code
		
		/// <summary>
		/// IsBuildIn domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsBuildInDomainPropertyId = new global::System.Guid(0x724d24b1, 0xd884, 0x41ea, 0xa1, 0x6d, 0x97, 0x34, 0x1a, 0xd5, 0x25, 0x28);
		
		/// <summary>
		/// Storage for IsBuildIn
		/// </summary>
		private global::System.Boolean isBuildInPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsBuildIn domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.Is BuildIn
		/// Type
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/IsBuildIn.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/IsBuildIn.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("724d24b1-d884-41ea-a16d-97341ad52528")]
		public global::System.Boolean IsBuildIn
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isBuildInPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsBuildInPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainType.IsBuildIn domain property.
		/// </summary>
		internal sealed partial class IsBuildInPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainType, global::System.Boolean>
		{
			private IsBuildInPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainType.IsBuildIn domain property value handler.
			/// </summary>
			public static readonly IsBuildInPropertyHandler Instance = new IsBuildInPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainType.IsBuildIn domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsBuildInDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(DomainType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isBuildInPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainType element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isBuildInPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BuildInID domain property code
		
		/// <summary>
		/// BuildInID domain property Id.
		/// </summary>
		public static readonly global::System.Guid BuildInIDDomainPropertyId = new global::System.Guid(0x7e66c2d5, 0xfb70, 0x4f1b, 0xb8, 0x43, 0x08, 0x50, 0xcd, 0x10, 0xdd, 0xa2);
		
		/// <summary>
		/// Storage for BuildInID
		/// </summary>
		private global::System.Guid buildInIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of BuildInID domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.Build In ID
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/BuildInID.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType/BuildInID.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("7e66c2d5-fb70-4f1b-b843-0850cd10dda2")]
		public global::System.Guid BuildInID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return buildInIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BuildInIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the DomainType.BuildInID domain property.
		/// </summary>
		internal sealed partial class BuildInIDPropertyHandler : DslModeling::DomainPropertyValueHandler<DomainType, global::System.Guid>
		{
			private BuildInIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the DomainType.BuildInID domain property value handler.
			/// </summary>
			public static readonly BuildInIDPropertyHandler Instance = new BuildInIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the DomainType.BuildInID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BuildInIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(DomainType element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.buildInIDPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(DomainType element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.buildInIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EntityModel opposite domain role accessor
		/// <summary>
		/// Gets or sets EntityModel.
		/// </summary>
		public virtual EntityModel EntityModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.DomainTypeDomainRoleId) as EntityModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModelHasDomainTypes.DomainTypeDomainRoleId, value);
			}
		}
		#endregion
	}
}
