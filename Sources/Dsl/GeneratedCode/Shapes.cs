//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass PersistentShape
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("8470ebf0-d5c6-4ee4-a2f0-06ebe67dec2d")]
	internal abstract partial class PersistentShapeBase : DslDiagrams::CompartmentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with PersistentShape.
		/// </summary>
		public static DslDiagrams::Decorator FindPersistentShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.4);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			outlinePen.Width = 0.015625F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
			// Custom font styles
			DslDiagrams::FontSettings fontSettings;
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Bold ;
			fontSettings.Size = 8/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
			fontSettings = new DslDiagrams::FontSettings();
			fontSettings.Style =  global::System.Drawing.FontStyle.Regular ;
			fontSettings.Size = 7/72.0F;
			classStyleSet.AddFont(new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7"), DslDiagrams::DiagramFonts.ShapeText, fontSettings);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		/// <summary>
		/// Specifies the geometry used by this shape
		/// </summary>
		public override DslDiagrams::ShapeGeometry ShapeGeometry
		{
			get
			{
				return DslDiagrams::ShapeGeometries.RoundedRectangle;
			}
		}
		#endregion
		#region Custom storage for shape properties that appear in the property grid
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private global::System.Drawing.Color GetFillColorValue()
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings != null && settings.IsOverridden(DslDiagrams::BrushSettingsFlags.Color))
			{
				return settings.Color;
			}
			return global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White);
		}
		
		/// <summary>
		/// Custom storage for domain property FillColor.
		/// </summary>
		private void SetFillColorValue(global::System.Drawing.Color newValue)
		{
			DslDiagrams::BrushSettings settings = this.StyleSet.GetOverriddenBrushSettings(DslDiagrams::DiagramBrushes.ShapeBackground);
			if(settings == null) settings = new DslDiagrams::BrushSettings();
			settings.Color = newValue;
			this.StyleSet.OverrideBrush(DslDiagrams::DiagramBrushes.ShapeBackground, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private global::System.Drawing.Drawing2D.DashStyle GetOutlineDashStyleValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.DashStyle))
			{
				return settings.DashStyle;
			}
			return global::System.Drawing.Drawing2D.DashStyle.Solid;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineDashStyle.
		/// </summary>
		private void SetOutlineDashStyleValue(global::System.Drawing.Drawing2D.DashStyle newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.DashStyle = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private float GetOutlineThicknessValue()
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings != null && settings.IsOverridden(DslDiagrams::PenSettingsFlags.Width))
			{
				return settings.Width;
			}
			return 0.015625f;
		}
		
		/// <summary>
		/// Custom storage for domain property OutlineThickness.
		/// </summary>
		private void SetOutlineThicknessValue(float newValue)
		{
			DslDiagrams::PenSettings settings = this.StyleSet.GetOverriddenPenSettings(DslDiagrams::DiagramPens.ShapeOutline);
			if(settings == null) settings = new DslDiagrams::PenSettings();
			settings.Width = newValue;
			this.StyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, settings);
			this.Invalidate();
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("TextName");
			field1.DefaultText = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetString("PersistentShapeTextNameDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field1.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextBold8");			
			shapeFields.Add(field1);
			
			DslDiagrams::ImageField field2 = new DslDiagrams::ImageField("IconEntity");
			field2.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("PersistentShapeIconEntityDefaultImage"));
			shapeFields.Add(field2);
			
			DslDiagrams::ChevronButtonField field3 = new DslDiagrams::ChevronButtonField("ExpandCollapse");
			field3.DefaultSelectable = false;
			field3.DefaultFocusable = false;
			shapeFields.Add(field3);
			
			DslDiagrams::ImageField field4 = new DslDiagrams::ImageField("IconStructure");
			field4.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("PersistentShapeIconStructureDefaultImage"));
			shapeFields.Add(field4);
			
			DslDiagrams::ImageField field5 = new DslDiagrams::ImageField("IconInterface");
			field5.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("PersistentShapeIconInterfaceDefaultImage"));
			shapeFields.Add(field5);
			
			DslDiagrams::ImageField field6 = new DslDiagrams::ImageField("IconInherit");
			field6.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("PersistentShapeIconInheritDefaultImage"));
			shapeFields.Add(field6);
			
			DslDiagrams::TextField field7 = new DslDiagrams::TextField("TextDescription");
			field7.DefaultText = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetString("PersistentShapeTextDescriptionDefaultText");
			field7.DefaultFocusable = true;
			field7.DefaultAutoSize = true;
			field7.AnchoringBehavior.MinimumHeightInLines = 1;
			field7.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field7.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			field7.DefaultFontId = new DslDiagrams::StyleSetResourceId(string.Empty, "ShapeTextRegular7");			
			shapeFields.Add(field7);
			
			DslDiagrams::ImageField field8 = new DslDiagrams::ImageField("IconTypedEntitySet");
			field8.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("PersistentShapeIconTypedEntitySetDefaultImage"));
			shapeFields.Add(field8);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "TextName");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.2, 0));
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconEntity");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
			DslDiagrams::ShapeField field3 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "ExpandCollapse");
			DslDiagrams::Decorator decorator3 = new DslDiagrams::ExpandCollapseDecorator(this.Store, (DslDiagrams::ToggleButtonField)field3, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator3);
				
			DslDiagrams::ShapeField field4 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconStructure");
			DslDiagrams::Decorator decorator4 = new DslDiagrams::ShapeDecorator(field4, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator4);
				
			DslDiagrams::ShapeField field5 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconInterface");
			DslDiagrams::Decorator decorator5 = new DslDiagrams::ShapeDecorator(field5, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator5);
				
			DslDiagrams::ShapeField field6 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconInherit");
			DslDiagrams::Decorator decorator6 = new DslDiagrams::ShapeDecorator(field6, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0, 0.15));
			decorators.Add(decorator6);
				
			DslDiagrams::ShapeField field7 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "TextDescription");
			DslDiagrams::Decorator decorator7 = new DslDiagrams::ShapeDecorator(field7, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, new DslDiagrams::PointD(0.2, 0.15));
			decorators.Add(decorator7);
				
			DslDiagrams::ShapeField field8 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconTypedEntitySet");
			DslDiagrams::Decorator decorator8 = new DslDiagrams::ShapeDecorator(field8, DslDiagrams::ShapeDecoratorPosition.InnerTopLeft, DslDiagrams::PointD.Empty);
			decorators.Add(decorator8);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[2+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetString("PersistentShapePropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Properties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.WhiteSmoke), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
				{
					string title = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetString("PersistentShapeNavigationPropertiesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("NavigationProperties", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.AliceBlue), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+1] = descriptor;
				}
			}
			
			return PersistentShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[2+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Properties", 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.NameDomainPropertyId, 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.DomainClassId, 
																				GetElementsFromPersistentTypeForProperties,
																				null,
																				null,
																				null);
					mappings[localCompartmentMappingsOffset+1] = new DslDiagrams::ElementListCompartmentMapping(
																				"NavigationProperties", 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase.NameDomainPropertyId, 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty.DomainClassId, 
																				GetElementsFromPersistentTypeForNavigationProperties,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromPersistentTypeForProperties(DslModeling::ModelElement element)
			{
				global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType root = (global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType)element;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.PropertyBase> result = root.Properties;
				return result;
			}
			internal static global::System.Collections.IList GetElementsFromPersistentTypeForNavigationProperties(DslModeling::ModelElement element)
			{
				global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType root = (global::TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentType)element;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.NavigationProperty> result = root.NavigationProperties;
				return result;
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// PersistentShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8470ebf0, 0xd5c6, 0x4ee4, 0xa2, 0xf0, 0x06, 0xeb, 0xe6, 0x7d, 0xec, 0x2d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected PersistentShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region OutlineDashStyle domain property code
		
		/// <summary>
		/// OutlineDashStyle domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineDashStyleDomainPropertyId = new global::System.Guid(0x26cdb409, 0xf654, 0x4317, 0x9c, 0x70, 0x95, 0xec, 0xd3, 0xf8, 0x34, 0x8c);
		
		/// <summary>
		/// Gets or sets the value of OutlineDashStyle domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape.Outline
		/// Dash Style
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/OutlineDashStyle.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/OutlineDashStyle.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("26cdb409-f654-4317-9c70-95ecd3f8348c")]
		public global::System.Drawing.Drawing2D.DashStyle OutlineDashStyle
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineDashStylePropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineDashStylePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentShape.OutlineDashStyle domain property.
		/// </summary>
		internal sealed partial class OutlineDashStylePropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentShapeBase, global::System.Drawing.Drawing2D.DashStyle>
		{
			private OutlineDashStylePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentShape.OutlineDashStyle domain property value handler.
			/// </summary>
			public static readonly OutlineDashStylePropertyHandler Instance = new OutlineDashStylePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentShape.OutlineDashStyle domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineDashStyleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Drawing2D.DashStyle GetValue(PersistentShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineDashStyle because its Kind is
				// set to CustomStorage. Please provide the GetOutlineDashStyleValue()
				// method on the domain class.
				return element.GetOutlineDashStyleValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentShapeBase element, global::System.Drawing.Drawing2D.DashStyle newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Drawing2D.DashStyle oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineDashStyle because its Kind is
					// set to CustomStorage. Please provide the SetOutlineDashStyleValue()
					// method on the domain class.
					element.SetOutlineDashStyleValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region OutlineThickness domain property code
		
		/// <summary>
		/// OutlineThickness domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutlineThicknessDomainPropertyId = new global::System.Guid(0x6adb581c, 0xd12a, 0x4dd1, 0xad, 0xbe, 0x5a, 0x4f, 0x06, 0x6e, 0xae, 0x20);
		
		/// <summary>
		/// Gets or sets the value of OutlineThickness domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape.Outline
		/// Thickness
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/OutlineThickness.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/OutlineThickness.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("6adb581c-d12a-4dd1-adbe-5a4f066eae20")]
		public global::System.Single OutlineThickness
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return OutlineThicknessPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutlineThicknessPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentShape.OutlineThickness domain property.
		/// </summary>
		internal sealed partial class OutlineThicknessPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentShapeBase, global::System.Single>
		{
			private OutlineThicknessPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentShape.OutlineThickness domain property value handler.
			/// </summary>
			public static readonly OutlineThicknessPropertyHandler Instance = new OutlineThicknessPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentShape.OutlineThickness domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutlineThicknessDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Single GetValue(PersistentShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for OutlineThickness because its Kind is
				// set to CustomStorage. Please provide the GetOutlineThicknessValue()
				// method on the domain class.
				return element.GetOutlineThicknessValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentShapeBase element, global::System.Single newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Single oldValue = GetValue(element);
				// float type precision is guaranteed only to 7th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-7)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for OutlineThickness because its Kind is
					// set to CustomStorage. Please provide the SetOutlineThicknessValue()
					// method on the domain class.
					element.SetOutlineThicknessValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region FillColor domain property code
		
		/// <summary>
		/// FillColor domain property Id.
		/// </summary>
		public static readonly global::System.Guid FillColorDomainPropertyId = new global::System.Guid(0xa5795d1c, 0x8df1, 0x42a1, 0x8c, 0xf3, 0xcc, 0x5b, 0x9e, 0x5d, 0xd0, 0x9a);
		
		/// <summary>
		/// Gets or sets the value of FillColor domain property.
		/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape.Fill
		/// Color
		/// </summary>
		[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/FillColor.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape/FillColor.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("a5795d1c-8df1-42a1-8cf3-cc5b9e5dd09a")]
		public global::System.Drawing.Color FillColor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return FillColorPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FillColorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the PersistentShape.FillColor domain property.
		/// </summary>
		internal sealed partial class FillColorPropertyHandler : DslModeling::DomainPropertyValueHandler<PersistentShapeBase, global::System.Drawing.Color>
		{
			private FillColorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the PersistentShape.FillColor domain property value handler.
			/// </summary>
			public static readonly FillColorPropertyHandler Instance = new FillColorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the PersistentShape.FillColor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FillColorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Drawing.Color GetValue(PersistentShapeBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for FillColor because its Kind is
				// set to CustomStorage. Please provide the GetFillColorValue()
				// method on the domain class.
				return element.GetFillColorValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(PersistentShapeBase element, global::System.Drawing.Color newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Drawing.Color oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for FillColor because its Kind is
					// set to CustomStorage. Please provide the SetFillColorValue()
					// method on the domain class.
					element.SetFillColorValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
	}
	/// <summary>
	/// DomainClass PersistentShape
	/// Description for TXSoftware.DataObjectsNetEntityModel.Dsl.PersistentShape
	/// </summary>
			
	internal partial class PersistentShape : PersistentShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PersistentShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PersistentShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass TypedEntitySetShape
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetShape.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySetShape.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("6ac89853-30c6-42a5-923b-1cf3bea448de")]
	internal abstract partial class TypedEntitySetShapeBase : PersistentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with TypedEntitySetShape.
		/// </summary>
		public static DslDiagrams::Decorator FindTypedEntitySetShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			outlinePen.Width = 0.015625F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[0+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
			}
			
			return TypedEntitySetShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[0+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					compartmentMappings.Add(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.TypedEntitySet), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// TypedEntitySetShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ac89853, 0x30c6, 0x42a5, 0x92, 0x3b, 0x1c, 0xf3, 0xbe, 0xa4, 0x48, 0xde);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected TypedEntitySetShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass TypedEntitySetShape
	/// </summary>
			
	internal partial class TypedEntitySetShape : TypedEntitySetShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TypedEntitySetShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public TypedEntitySetShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass EntityShape
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityShape.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityShape.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("8f29a06a-5642-4cba-873f-a777fb76b6ed")]
	internal abstract partial class EntityShapeBase : EntityBaseShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with EntityShape.
		/// </summary>
		public static DslDiagrams::Decorator FindEntityShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			outlinePen.Width = 0.015625F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::ImageField field1 = new DslDiagrams::ImageField("IconHierarchyRoot");
			field1.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetObject("EntityShapeIconHierarchyRootDefaultImage"));
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IconHierarchyRoot");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, new DslDiagrams::PointD(0, 0.18));
			decorators.Add(decorator1);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[0+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
			}
			
			return EntityShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.Entity));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[0+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					compartmentMappings.Add(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.Entity), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8f29a06a, 0x5642, 0x4cba, 0x87, 0x3f, 0xa7, 0x77, 0xfb, 0x76, 0xb6, 0xed);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass EntityShape
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
			
	internal partial class EntityShape : EntityShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass InterfaceShape
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceShape.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.InterfaceShape.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("5fc3a0b8-0a42-4366-baf0-a86e5cb34e05")]
	internal abstract partial class InterfaceShapeBase : PersistentShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with InterfaceShape.
		/// </summary>
		public static DslDiagrams::Decorator FindInterfaceShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			outlinePen.Width = 0.015625F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[1+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
				{
					string title = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager.GetString("InterfaceShapeIndexesTitle");
					DslDiagrams::ElementListCompartmentDescription descriptor = new DslDiagrams::ElementListCompartmentDescription("Indexes", title, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.SeaShell), false, 
						global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.White), false,
						null, null,
						false);
					compartmentDescriptions[localCompartmentsOffset+0] = descriptor;
				}
			}
			
			return InterfaceShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[1+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					mappings[localCompartmentMappingsOffset+0] = new DslDiagrams::ElementListCompartmentMapping(
																				"Indexes", 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex.CalculatedNameDomainPropertyId, 
																				global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex.DomainClassId, 
																				GetElementsFromInterfaceForIndexes,
																				null,
																				null,
																				null);
					compartmentMappings.Add(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			internal static global::System.Collections.IList GetElementsFromInterfaceForIndexes(DslModeling::ModelElement element)
			{
				global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface root = (global::TXSoftware.DataObjectsNetEntityModel.Dsl.Interface)element;
					// Segments 0 and 1
					DslModeling::LinkedElementCollection<global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityIndex> result = root.Indexes;
				return result;
			}
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// InterfaceShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5fc3a0b8, 0x0a42, 0x4366, 0xba, 0xf0, 0xa8, 0x6e, 0x5c, 0xb3, 0x4e, 0x05);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected InterfaceShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass InterfaceShape
	/// </summary>
			
	internal partial class InterfaceShape : InterfaceShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass EntityBaseShape
	/// </summary>
	[DslDesign::DisplayNameResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseShape.DisplayName", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBaseShape.Description", typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel), "TXSoftware.DataObjectsNetEntityModel.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel))]
	[DslModeling::DomainObjectId("9e9faa75-d840-4491-8d22-94ad92bd7427")]
	internal abstract partial class EntityBaseShapeBase : InterfaceShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with EntityBaseShape.
		/// </summary>
		public static DslDiagrams::Decorator FindEntityBaseShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.5, 0.5);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Initializes style set resources for this shape type
		/// </summary>
		/// <param name="classStyleSet">The style set for this shape class</param>
		protected override void InitializeResources(DslDiagrams::StyleSet classStyleSet)
		{
			base.InitializeResources(classStyleSet);
			
			// Outline pen settings for this shape.
			DslDiagrams::PenSettings outlinePen = new DslDiagrams::PenSettings();
			outlinePen.Color = global::System.Drawing.Color.FromKnownColor(global::System.Drawing.KnownColor.Silver);
			outlinePen.Width = 0.015625F;
			classStyleSet.OverridePen(DslDiagrams::DiagramPens.ShapeOutline, outlinePen);
		}
		
		/// <summary>
		/// Indicates whether this shape displays a background gradient.
		/// </summary>
		public override bool HasBackgroundGradient
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Indicates the direction of the gradient.
		/// </summary>
		public override global::System.Drawing.Drawing2D.LinearGradientMode BackgroundGradientMode
		{
			get
			{
				return global::System.Drawing.Drawing2D.LinearGradientMode.Horizontal;
			}
		}
		#endregion
		#region CompartmentShape code
		/// <summary>
		/// Returns a value indicating whether compartment header should be visible if there is only one of them.
		/// </summary>
		public override bool IsSingleCompartmentHeaderVisible
		{
			get { return true; }
		}
		
		private static DslDiagrams::CompartmentDescription[] compartmentDescriptions;
		
		/// <summary>
		/// Gets an array of CompartmentDescription for all compartments shown on this shape
		/// (including compartments defined on base shapes).
		/// </summary>
		/// <returns></returns>
		public override DslDiagrams::CompartmentDescription[] GetCompartmentDescriptions()
		{
			if(compartmentDescriptions == null)
			{
				// Initialize the array of compartment descriptions if we haven't done so already. 
				// First we get any compartment descriptions in base shapes, and add on any compartments
				// that are defined on this shape. 
				DslDiagrams::CompartmentDescription[] baseCompartmentDescriptions = base.GetCompartmentDescriptions();
				
				int localCompartmentsOffset = 0;
				if(baseCompartmentDescriptions!=null)
				{
					localCompartmentsOffset = baseCompartmentDescriptions.Length;
				}
				compartmentDescriptions = new DslDiagrams::ElementListCompartmentDescription[0+localCompartmentsOffset];
				
				if(baseCompartmentDescriptions!=null)
				{
					baseCompartmentDescriptions.CopyTo(compartmentDescriptions, 0);	
				}
			}
			
			return EntityBaseShape.compartmentDescriptions;
		}
		
		private static global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]> compartmentMappings;
		
		/// <summary>
		/// Gets an array of CompartmentMappings for all compartments displayed on this shape
		/// (including compartment maps defined on base shapes). 
		/// </summary>
		/// <param name="melType">The type of the DomainClass that this shape is mapped to</param>
		/// <returns></returns>
		protected override DslDiagrams::CompartmentMapping[] GetCompartmentMappings(global::System.Type melType)
		{
			if(melType==null) throw new global::System.ArgumentNullException("melType");
			
			if(compartmentMappings==null)
			{
				// Initialize the table of compartment mappings if we haven't done so already. 
				// The table contains an array of CompartmentMapping for every Type that this
				// shape can be mapped to. 
				compartmentMappings = new global::System.Collections.Generic.Dictionary<global::System.Type, DslDiagrams::CompartmentMapping[]>();
				{
					// First we get the mappings defined for the base shape, and add on any mappings defined for this
					// shape. 
					DslDiagrams::CompartmentMapping[] baseMappings = base.GetCompartmentMappings(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase));
					int localCompartmentMappingsOffset = 0;
					if(baseMappings!=null)
					{
						localCompartmentMappingsOffset = baseMappings.Length;
					}
					DslDiagrams::CompartmentMapping[] mappings = new DslDiagrams::CompartmentMapping[0+localCompartmentMappingsOffset];
					
					if(baseMappings!=null)
					{
						baseMappings.CopyTo(mappings, 0);
					}
					compartmentMappings.Add(typeof(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityBase), mappings);
				}
			}
			
			// See if we can find the mapping being requested directly in the table. 
			DslDiagrams::CompartmentMapping[] returnValue;
			if(compartmentMappings.TryGetValue(melType, out returnValue))
			{
				return returnValue;
			}
			
			// If not, loop through the types in the table, and find the 'most derived' base
			// class of melType. 
			global::System.Type selectedMappedType = null;
			foreach(global::System.Type mappedType in compartmentMappings.Keys)
			{
				if(mappedType.IsAssignableFrom(melType) && (selectedMappedType==null || selectedMappedType.IsAssignableFrom(mappedType)))
				{
					selectedMappedType = mappedType;
				}
			}
			if(selectedMappedType!=null)
			{
				return compartmentMappings[selectedMappedType];
			}
			return new DslDiagrams::CompartmentMapping[] {};
		}
		
			#region DomainPath traversal methods to get the list of elements to display in a compartment.
			#endregion
		
		#endregion
		#region Constructors, domain class Id
	
		/// <summary>
		/// EntityBaseShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9e9faa75, 0xd840, 0x4491, 0x8d, 0x22, 0x94, 0xad, 0x92, 0xbd, 0x74, 0x27);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityBaseShapeBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass EntityBaseShape
	/// </summary>
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1501:AvoidExcessiveInheritance", Justification = "Generated code.")]
			
	internal partial class EntityBaseShape : EntityBaseShapeBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityBaseShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EntityBaseShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

