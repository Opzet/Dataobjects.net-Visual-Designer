//------------------------------------------------------------------------------
// <auto-generated>
//     DataObjects.Net Entity Model Designer
//     Template version: 1.0.5.0
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;

using Xtensive.Collections;
using Xtensive.ObjectMapping;
using Xtensive.Orm;
using Xtensive.Orm.ObjectMapping;

namespace TXSoftware.DataObjectsNetEntityModel.Web.Model
{
	public static class DtoRepository
	{
	    private static readonly MapperSettings
	        DefaultMappingSettings = new MapperSettings
	                                 {
	                                     EnableDynamicSourceHierarchies = true
	                                 };

	    private static DtoMappings dtoMappings;

	    public static DtoMappings DtoMappings
	    {
	        get
	        {
	            if (dtoMappings == null)
	            {
	                dtoMappings = new DtoMappings();
	            }
	            return dtoMappings;
	        }
	    }

	    private static Mapper CreateMapper(Session session)
	    {
	        return new Mapper(session ?? Session.Demand(), DtoMappings.Descriptor, DefaultMappingSettings);
	    }

	    public static TResultDto TransformToDto<TResultDto>(this IEntity entity, Session session)
			where TResultDto : IObjectDto
	    {
	        Mapper mapper = CreateMapper(session);
	        object mapResult = mapper.Transform(entity);
	        return (TResultDto) mapResult;
	    }

	    public static TResultEntity ReplayToEntity<TSourceDto, TResultEntity>(this TSourceDto entityDto, Session session)
	        where TResultEntity : class, IEntity
	        where TSourceDto : IObjectDto
	    {
	        return ReplayToEntity<TSourceDto, TResultEntity>(entityDto, null, session);
	    }

	    public static TResultEntity ReplayToEntity<TSourceDto, TResultEntity>(this TSourceDto modifiedDto, IObjectDto originalDto, 
			Session session)
	        where TResultEntity : class, IEntity
	        where TSourceDto : IObjectDto
	    {
	        TResultEntity result = default(TResultEntity);

	        var originalList = new List<object>();
			if (originalDto != null)
			{
				originalList.Add(originalDto);
			}
			
	        var modifiedList = new List<object>
	                           {
	                               modifiedDto
	                           };

	        Mapper mapper = CreateMapper(session);
	        ReadOnlyDictionary<object, object> keyMapping;
	        using (var compareResult = mapper.Compare(originalList, modifiedList))
	        {
	            compareResult.Operations.Replay();
	            keyMapping = compareResult.KeyMapping;
	        }

	        Dictionary<Key, IObjectDto> dtoObjectMappings;
	        List<Key> entityKeys = RetrieveEntityKeys(modifiedList, keyMapping, true, out dtoObjectMappings);

	        if (entityKeys.Count == 1 && modifiedList.Count == entityKeys.Count)
	        {
	            Key entityKey = entityKeys[0];
	            result = Query.SingleOrDefault<TResultEntity>(entityKey);

	            if (result != null)
	            {
	                modifiedDto.UpdateKeyFields(result.TransformToDto<TSourceDto>(session));
	            }
	        }

	        return result;
	    }

	    private static string GetDtoKey(IObjectDto dto)
	    {
	        return dto._MappingKey;
	    }

	    private static void SetDtoKey(IObjectDto dto, string key)
	    {
	        dto._MappingKey = key;
	    }

	    private static List<Key> RetrieveEntityKeys(IEnumerable enumerable,
	        IDictionary<object, object> keyMapping, bool updateDtoKeys)
	    {
	        Dictionary<Key, IObjectDto> dtoObjectMappings;
	        return RetrieveEntityKeys(enumerable, keyMapping, updateDtoKeys, out dtoObjectMappings);
	    }

	    private static List<Key> RetrieveEntityKeys(IEnumerable enumerable,
	        IDictionary<object, object> keyMapping, bool updateDtoKeys,
	        out Dictionary<Key, IObjectDto> dtoObjectMappings)
	    {
	        var result = new List<Key>();
	        dtoObjectMappings = updateDtoKeys ? new Dictionary<Key, IObjectDto>() : null;

	        foreach (IObjectDto dtoItem in enumerable)
	        {
	            string key = GetDtoKey(dtoItem);

	            if (key != null)
	            {
	                Key entityKey = Key.Parse(Domain.Current, (string) keyMapping[key]);
	                if (entityKey != null)
	                {
	                    result.Add(entityKey);

	                    if (updateDtoKeys)
	                    {
	                        //dtoItem.OriginalObject = Cloner.Default.Clone(dtoItem);
	                        SetDtoKey(dtoItem, entityKey.Format());
	                        dtoObjectMappings.Add(entityKey, dtoItem);
	                    }
	                }
	            }
	        }

	        return result;
	    }

	    public static IEnumerable<TResultDto> TransformToDto<TSourceEntity, TResultDto>(
	        this IEnumerable<TSourceEntity> entities, Session session)
	        where TResultDto : IObjectDto
	        where TSourceEntity : IEntity
	    {
	        IEnumerable<TResultDto> result = null;
	        Mapper mapper = CreateMapper(session);

	        object mapResult = mapper.Transform(entities.ToList());
	        if (mapResult != null)
	        {
	            if (mapResult is List<object>)
	            {
	                var listObj = (List<object>) mapResult;
	                result = listObj.Cast<TResultDto>();
	            }
	            else
	            {
	                result = new List<TResultDto>
	                         {
	                             (TResultDto) mapResult
	                         };
	            }
	        }

	        return result;
	    }	
	}
}
