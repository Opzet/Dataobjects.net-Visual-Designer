<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="VB" debug="true" hostSpecific="true" #>
<#@ output extension=".txt" #>
<#@ DONetEntityModelDesigner processor="DONetEntityModelDesignerDirectiveProcessor" requires="fileName='$domFileName$'" #>
<#@ include file="DOM.Utility.VB.ttinclude" #>
<#@ import namespace="TXSoftware.DataObjectsNetEntityModel.Dsl" #>
<#@ import namespace="System.Collections.ObjectModel" #>

<# 
	'System.Diagnostics.Debugger.Launch(); System.Diagnostics.Debugger.Break();
	' REMARKS:
	' To setup generator, update value of "fileName='$domFileName$'" in DONetEntityModelDesigner tag to point to existing entity model file *.dom
	' path is relative to current template (*.tt) file

	' Initialize enviroment variables required to generate entities
	InitializeEnviroment()

	' Method where you can customize some settings of generate process (e.g. enable/disable of generating partial types, etc...)
	CustomizeSettings()

	' Generate process - generates entity model classes extracted from model file defined in attribute 'requires'/'fileName' above (relative path to file)
	GenerateEntities()
#>
<#+
Private Sub CustomizeSettings()
	' Variables.OutputFolder - string 
	'   output folder where will be generated classes
	'   allowed value: 
	' 	  - relative path from current directory where current *.tt file is located
	'	  - value "" represents current directory (default value)
	' Default value is:
	' Variables.OutputFolder = "";

	' Variables.VirtualProperties - bool
	'   true - adds modifier 'virtual' to generated properties
	'   false - do not add 'virtual' modifier to generated properties
	'  Default value is true.
	' Variables.VirtualProperties = true;
	
	' Variables.PartialTypes - bool
	'   true - adds modifier 'partial' to generated classes
	'   false - do not add 'partial' to generated classes
	'  Default value is true.
	' Variables.PartialTypes = true;
	
	' Variables.ExtraUsings - string[]
	'   array of extra usings to add to each generated file
	'  Default is empty list - new string[0]
	' Variables.ExtraUsings = new string[0];
	
	' Variables.ConstructorsForKeyFields - bool
	'   true - generates constructors for key fields
	'   false - does not generate constructors for key fields
	'  Default is true.
	' Variables.ConstructorsForKeyFields = true;
End Sub

Private Sub InitializeEnviroment()
	' builds global variables
	BuildVariables(Me)

	' prepare file manager which is responsible for saving generated code into multiple files in defined output folder
	PrepareFileManager()

	' validate entity model
    ValidateModel()

	' builds header for generated files
	BuildFilesHeader()

	' build global namespace value
	ResolveNamespace()
End Sub

Private Sub GenerateEntities()
	'IModelRoot modelRoot = Variables.ModelRoot;
	foreach(IPersistentType persistentType in Variables.ModelRoot.PersistentTypes)
	{
		WriteEntity(persistentType)
	}
	
	' flush all generated files
	Variables.Manager.Flush()
End Sub
#>
<#+
' class 'Variables'
NotInheritable Class Variables
	' properties setable by users
	Public Shared OutputFolder As String
	Public Shared ExtraUsings As String() = New String() {}
	Public Shared PartialTypes As Boolean = True
	Public Shared VirtualProperties As Boolean = True
	Public Shared ConstructorsForKeyFields As Boolean = True

	Public Shared TemplateFile As String
	Public Shared CurrentDirectory As String
	Public Shared Manager As FileManager
	Public Shared ModelRoot As IModelRoot
	Public Shared Code As CodeGenerationTools
	Public Shared PropertiesBuilder As IPropertiesBuilder
	Public Shared GlobalNamespace As String
	
	Public Shared ReadOnly Property OutputPath() As String
		Get
			Return Manager.OutputPath
		End Get
	End Property

	
	Private Sub New()
	End Sub
End Class

Private Sub BuildVariables(textTransformation As Object)
	Variables.Code = New CodeGenerationTools(textTransformation)
	Variables.TemplateFile = Variables.Code.TemplateFile
	Variables.CurrentDirectory = Path.GetDirectoryName(Variables.TemplateFile)
	PropertyOwnerContext.Initialize()
End Sub

Private Sub ResolveNamespace()
	Variables.GlobalNamespace = Variables.Code.EscapeNamespace(Variables.ModelRoot.[Namespace])
	If String.IsNullOrEmpty(Variables.GlobalNamespace) Then
		Variables.GlobalNamespace = Variables.Code.EscapeNamespace(Variables.Manager.ResolveNamespace())
	End If

	Variables.Code.GlobalNamespace = Variables.GlobalNamespace
End Sub

Private Sub ValidateModel()
	Variables.ModelRoot = Me.EntityModel.ModelRoot
	Variables.ModelRoot.Validate(TemplateVersion)
End Sub

Private Sub PrepareFileManager()
	Dim manager As FileManager = FileManager.Create(Me)
	Dim currentDirectory = Variables.CurrentDirectory
	manager.OutputPath = If(String.IsNullOrEmpty(Variables.OutputFolder), currentDirectory, Path.Combine(currentDirectory, Variables.OutputFolder))
	If Not Directory.Exists(manager.OutputPath) Then
		Throw New DirectoryNotFoundException(manager.OutputPath)
	End If

	Variables.Manager = manager
End Sub

Private Sub BuildFilesHeader()
    Variables.Manager.StartHeader()
#>
'------------------------------------------------------------------------------
' <auto-generated>
'     <#= TXSoftware.DataObjectsNetEntityModel.Dsl.ModelApp.ProductName #>
'     Template version: <#= TemplateVersion #>
'     This code was generated from a template.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Imports System
Imports System.Collections
Imports System.Collections.Generic
Imports System.Collections.ObjectModel
Imports System.Collections.Specialized

Imports Xtensive.Core
Imports Xtensive.Orm
<#=String.Join(Environment.NewLine, Variables.ExtraUsings.[Select](Function(usingItem) "using " & Convert.ToString(usingItem) & ";").ToArray())#><#=Variables.Code.StringOptional(Environment.NewLine, Variables.ExtraUsings.Length > 0)#>
<#+
    Variables.Manager.EndHeader()
End Sub
#>
<#+
Private Sub PushIndent()
	Me.PushIndent(New [String](" "C, 4))
End Sub

Private Function GetEntityNamespace(entity As IPersistentType) As String
	Return Variables.Code.EscapeNamespace(entity)
End Function
#>
<#+
Private Sub WriteEntity(entity As IPersistentType)
	Variables.Manager.StartNewFile(Convert.ToString(entity.Name) & ".vb")

	Variables.PropertiesBuilder = entity.GetPropertiesBuilder()

	Dim typeAttributes As String = String.Join(Environment.NewLine, Variables.Code.CreateTypeAttributes(entity, Variables.PropertiesBuilder).[Select](Function(attr) "<" & Convert.ToString(attr) & ">").ToArray())
	Dim hasTypeAttributes As Boolean = Not String.IsNullOrEmpty(typeAttributes)
	Dim entityInheritance As String = String.Join(" ", From item In Variables.Code.InheritanceList(entity) Select "Inherits " & Convert.ToString(item))
	Dim entityNamespace As String = GetEntityNamespace(entity)
#>
Namespace <#= entityNamespace #>
<#+
	Me.PushIndent()
#>
<#=Variables.Code.StringAfter(typeAttributes, Environment.NewLine)#><#=Accessibility.ForType(entity)#> <#=Variables.Code.SpaceAfter(Variables.Code.InheritanceModifier(entity))#><#=Variables.Code.StringOptional("Partial ", Variables.PartialTypes)#><#=Variables.Code.SpaceAfter(Variables.Code.TypeIdent(entity))#><#=Variables.Code.Escape(entity)#><#=Variables.Code.StringBefore(" ", entityInheritance)#>
<#+
	Me.PushIndent()
	WriteProperties(entity.Properties, "Scalar Properties")
#>
<#+
	WriteProperties(entity.NavigationProperties, "Navigation Properties")
#>
<#+
	WriteInheritedProperties(entity)
	If entity.TypeKind = PersistentTypeKind.Entity Then
		WriteConstructors(entity)
	End If
	Me.PopIndent()
#>
End Class
<#+
	Me.PopIndent()
#>
End Namespace
<#+
End Sub

Private Sub WriteInheritedProperties(entity As IPersistentType)
	If TypeOf entity Is IInterface Then
		Dim [interface] As IInterface = DirectCast(entity, IInterface)
		If TypeOf [interface] Is IEntityBase Then
			Dim entityBase As IEntityBase = DirectCast([interface], IEntityBase)

			Dim propertiesToImplement = Variables.PropertiesBuilder.GetInheritedProperties()

			Dim scalarPropertiesToImplement As IEnumerable(Of IPropertyBase) = propertiesToImplement.Where(Function(item) item.PropertyKind <> PropertyKind.Navigation)
			Dim navigationPropertiesToImplement As IEnumerable(Of IPropertyBase) = propertiesToImplement.Where(Function(item) item.PropertyKind = PropertyKind.Navigation)

			If scalarPropertiesToImplement.Count() > 0 Then
				Using PropertyOwnerContext.Current.ImpersonateAsOwner(entity, scalarPropertiesToImplement)
					WriteProperties(scalarPropertiesToImplement, "Inherited Scalar Properties")
				End Using
			End If

			If navigationPropertiesToImplement.Count() > 0 Then
				Using PropertyOwnerContext.Current.ImpersonateAsOwner(entity, navigationPropertiesToImplement)
					WriteProperties(navigationPropertiesToImplement, "Inherited Navigation Properties")
				End Using
			End If
		End If
	End If
End Sub

Private Sub WriteProperties(properties As IEnumerable(Of IPropertyBase), regionName As String)
	Dim lastProperty As Boolean = False
	Dim propertiesCount As Integer = properties.Count()

	If propertiesCount > 0 Then
#>

#Region <#= regionName #>

<#+End If
	
	Dim propertyIdx As Integer = 0
	For Each sourceProperty As IPropertyBase In properties
		Dim currentProperty = Variables.PropertiesBuilder.GetProperty(sourceProperty, InheritanceMember.Current)
		Dim inheritedProperty = Variables.PropertiesBuilder.GetProperty(sourceProperty, InheritanceMember.Inherited)

		Dim propertyTypeAttributes As String = String.Join(Environment.NewLine, Variables.Code.CreateTypeAttributes(currentProperty, Variables.PropertiesBuilder).[Select](Function(attr) "<" & Convert.ToString(attr) & ">").ToArray())
		Dim propertyHasTypeAttributes As Boolean = Not String.IsNullOrEmpty(propertyTypeAttributes)
		Dim setterVisible As Boolean = Accessibility.VisibleSetter(currentProperty, Variables.PropertiesBuilder)
		lastProperty = propertyIdx = (propertiesCount - 1)
#>
<#=Variables.Code.StringAfter(propertyTypeAttributes, Environment.NewLine)#><#=Variables.Code.SpaceAfter(Accessibility.ForType(currentProperty))#><#=Variables.Code.SpaceAfter(Variables.Code.StringOptional(Variables.Code.InheritanceModifier(currentProperty), Variables.VirtualProperties))#><#=Variables.Code.SpaceAfter(" Property")#><#= Variables.Code.Escape(currentProperty.Name)#><#=Variables.Code.SpaceAfter(" as")#><#=Variables.Code.EscapeType(inheritedProperty)#>
<#=Variables.Code.StringOptional(Environment.NewLine, !lastProperty)#>
<#+
		propertyIdx++;
	Next
	If propertiesCount > 0 Then
#>

#End Region
<#+ End If
End Sub

Private Sub WriteConstructors(entity As IPersistentType)
#>

#Region Constructors

<#=Variables.Code.SpaceAfter(Accessibility.ForType(entity))#><#=Variables.Code.SpaceBefore("Sub New(")#><#=Variables.Code.StringBefore("ByVal session As ", Variables.Code.BuildXtensiveType(OrmType.Session))#>)
MyBase.New(session)
End Sub

<#=Variables.Code.SpaceAfter(Accessibility.ForType(entity))#><#=Variables.Code.SpaceBefore("Sub New()")#>
MyBase.New(session)
End Sub

<#+ 
	Dim constructorKeyFields As New List(Of String)()
	Dim constructorKeyNames As New List(Of String)()

	If Variables.ConstructorsForKeyFields Then
		Dim keyFields As IScalarProperty() = entity.GetScalarProperties().Where(Function([property]) [property].KeyAttribute.Enabled).OrderBy(Function([property]) [property].KeyAttribute.Position.GetValueOrDefault(0)).ToArray()

		For Each keyField As var In keyFields
			Dim currentProperty = Variables.PropertiesBuilder.GetProperty(keyField, InheritanceMember.Current)
			Dim inheritedProperty = Variables.PropertiesBuilder.GetProperty(keyField, InheritanceMember.Inherited)

			Dim propertyName As String = Variables.Code.Escape(currentProperty.Name).ToLower()

			constructorKeyFields.Add(String.Format("{0} As {1}", propertyName, Variables.Code.EscapeType(inheritedProperty)))
			constructorKeyNames.Add(propertyName)
		Next

		If constructorKeyFields.Count > 0 Then
			constructorKeyFields.Insert(0, String.Format("ByVal session As {0}", Variables.Code.BuildXtensiveType(OrmType.Session)))
		End If
	End If
#>

<#+ If constructorKeyFields.Count > 0 Then #>
<#=Variables.Code.SpaceAfter(Accessibility.ForType(entity))#><#=Variables.Code.SpaceBefore("Sub New(")#><#=Variables.Code.StringAfter(string.Join(",", constructorKeyFields), ")")#>
MyBase.New(<#=Variables.Code.StringAfter(string.Join(",", constructorKeyNames), ")")#>
End Sub
<#+ End If #>

#End Region
<#+
End Sub
Dim TemplateVersion As String = "1.0.3.0"
#>