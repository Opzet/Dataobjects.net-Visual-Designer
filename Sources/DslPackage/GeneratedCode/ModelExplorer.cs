//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace TXSoftware.DataObjectsNetEntityModel.Dsl
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal partial class DONetEntityModelDesignerExplorer : DONetEntityModelDesignerExplorerBase
	{
		/// <summary>
		/// Constructs a new DONetEntityModelDesignerExplorer.
		/// </summary>
		public DONetEntityModelDesignerExplorer(global::System.IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}
	}
	
	/// <summary>
	/// Control hosted in the DONetEntityModelDesignerExplorerToolWindow.
	/// </summary>
	internal abstract class DONetEntityModelDesignerExplorerBase : DslShell::ModelExplorerTreeContainer
	{
		/// <summary>
		/// Constructs a new DONetEntityModelDesignerExplorerBase.
		/// </summary>
		protected DONetEntityModelDesignerExplorerBase(global::System.IServiceProvider serviceProvider) : base(serviceProvider)
		{
			
			
			// Adds custom tree node settings...
			global::System.Resources.ResourceManager resourceManager = global::TXSoftware.DataObjectsNetEntityModel.Dsl.DONetEntityModelDesignerDomainModel.SingletonResourceManager;
			
			this.AddExplorerNodeCustomSetting(global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EntityModelExplorerImage")), 
							false); 
			this.AddExplorerNodeCustomSetting(global::TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("DomainTypeExplorerImage")), 
							false); 
			
			// Add a call back to provide ModelElementTreeNode TreeNode name in the Model Explorer
			this.GetModelElementDisplayNameEventHandler = new DslShell.GetModelElementDisplayNameEventHandler(GetModelElementDisplayName);
		}
	
	
	
		/// <summary>
		/// Create IElementVisitor
		/// </summary>
		/// <returns>IElementVisitor</returns>
		protected override DslModeling::IElementVisitor CreateElementVisitor()
		{
			return new DslShell::ExplorerElementVisitor(this);
		}
	
		/// <summary>
		/// Specifies the context menu that should be shown for the model explorer.
		///</summary>
		protected override global::System.ComponentModel.Design.CommandID ContextMenuCommandId
		{
			get
			{
				return Constants.DONetEntityModelDesignerExplorerMenu;
			}
		}
		
		/// <summary>
		/// Returns the root elements domain class Id. The is the very top level tree node in the TreeView
		///</summary>
		protected override global::System.Guid RootElementDomainClassId
		{
			get { return global::TXSoftware.DataObjectsNetEntityModel.Dsl.EntityModel.DomainClassId; }
		}
		
		/// <summary>
		/// Returns the root elements to be displayed in the explorer.
		///</summary>
		protected override global::System.Collections.IList FindRootElements(DslModeling::Store store)
		{
			return store.ElementDirectory.FindElements( this.RootElementDomainClassId);
		}
			
		/// <summary>
		/// Method to supply the name for ModelElementTreeNode object in the TreeView.
		/// </summary>
		/// <param name="modelElement">Element to be displayed in the tree node</param>
		/// <returns>Name shown in the Model Explorer</returns>
		private string GetModelElementDisplayName(DslModeling::ModelElement modelElement)
		{
			string treeNodeDisplayName = null;
			DslModeling::DomainDataDirectory directory = modelElement.Store.DomainDataDirectory;
			DslModeling::DomainPropertyInfo domainPropertyInfo = null;
			DslModeling::ModelElement redirectedElement = null;
			
			switch ( modelElement.GetDomainClass().Id.ToString( "D", System.Globalization.CultureInfo.InvariantCulture) )
			{
				case "6881cfb0-e300-4d8b-8343-e1824c44c35a":	// DomainType.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::TXSoftware.DataObjectsNetEntityModel.Dsl.DomainType.FullNameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
		
			}
			
			if (domainPropertyInfo != null && redirectedElement != null)
			{
				// Get the name based on the designated domian property
				treeNodeDisplayName = domainPropertyInfo.GetValue(redirectedElement) as string;
			}
			else
			{
				// The passed in modelElement does not have a DomainPath specified. Try access the default name from the element.
				DslModeling::DomainClassInfo.TryGetName(modelElement, out treeNodeDisplayName);
			}
			return treeNodeDisplayName;
		}
	}
}
	


